{"id":"gcodekit4-1","title":"fix visualizer","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:18:51.586800169+07:00","updated_at":"2025-10-28T14:44:49.896277199+07:00","closed_at":"2025-10-28T14:44:49.896277199+07:00"}
{"id":"gcodekit4-2","title":"Reorganize visualizer controls into single toolbar row with pan buttons on right","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:56:57.51401382+07:00","updated_at":"2025-10-28T16:09:54.247582625+07:00","closed_at":"2025-10-28T16:09:54.247582625+07:00"}
{"id":"gcodekit4-3","title":"Review and improve visualizer world coordinates and fit-to-window function","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-28T16:10:12.206718734+07:00","updated_at":"2025-10-28T16:10:12.206718734+07:00"}
{"id":"gcodekit4-4","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"Move all remaining inline #[cfg(test)] tests from source files to the tests/ directory, organized by module hierarchy.\n\nScope:\n- Identify all modules with inline tests in src/\n- Create corresponding test files in tests/ organized by module structure\n- Convert inline unit tests to integration tests testing public API\n- Remove #[cfg(test)] blocks from source files\n- Ensure all tests focus on public API, not internal implementation\n- Follow AGENTS.md guidelines for test organization\n\nBenefits:\n- Consistent test organization across entire codebase\n- Better separation of test code from implementation\n- Tests verify public contracts, not implementation details\n- Easier to find and maintain tests\n- Follows Rust best practices and AGENTS.md standards\n\nReference: Visualizer module migration completed in gcodekit4-1 (28 â†’ 102 tests)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:25.663259692+07:00","updated_at":"2025-10-28T16:20:42.177487534+07:00"}
{"id":"gcodekit4-5","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:42.276578747+07:00","updated_at":"2025-10-28T16:21:17.711282027+07:00","closed_at":"2025-10-28T16:21:17.711282027+07:00"}
{"id":"gcodekit4-6","title":"Increase test coverage to at least 600 comprehensive tests","description":"Expand test coverage from current ~530 tests to at least 600 comprehensive tests across all modules.\n\nCurrent Status:\n- Total tests: ~530\n- Visualizer: 102 integration tests (recently migrated)\n- Phase 7: 40 tests\n- Phase 6/7 UI: 27 tests\n- Other modules: ~361 tests\n\nTarget Coverage Areas:\n1. Communication Module\n   - Serial/TCP/WebSocket connection tests\n   - Message parsing and protocol tests\n   - Error handling and reconnection logic\n   - Flow control and buffer management\n\n2. G-Code Parser \u0026 Preprocessors\n   - All 14 preprocessor tests\n   - Edge cases and error conditions\n   - Arc expansion and coordinate transformations\n   - Mesh leveling and calibration\n\n3. Firmware Controllers\n   - GRBL, TinyG, g2core, FluidNC, Smoothieware\n   - Command parsing and response handling\n   - State machine transitions\n   - Override and real-time commands\n\n4. Core Module\n   - Event system tests\n   - State management\n   - Message handling\n   - Controller lifecycle\n\n5. UI Module\n   - Component behavior tests\n   - State synchronization\n   - User interaction flows\n   - Error handling and validation\n\n6. Utilities\n   - File I/O operations\n   - Data processing\n   - Export functionality\n   - Configuration management\n\nGoals:\n- 600+ total tests (70 new tests minimum)\n- All tests in tests/ folder (no inline tests)\n- Focus on integration tests testing public API\n- Comprehensive edge case coverage\n- Error condition testing\n- Realistic usage scenarios\n\nBenefits:\n- Higher confidence in code correctness\n- Better regression detection\n- Improved maintainability\n- Documentation through tests\n- Production-ready quality assurance","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:16.585029885+07:00","updated_at":"2025-10-28T16:22:51.744349745+07:00"}
{"id":"gcodekit4-7","title":"Increase test coverage to at least 600 comprehensive tests","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:52.318210331+07:00","updated_at":"2025-10-28T16:23:40.454446454+07:00","closed_at":"2025-10-28T16:23:40.454446454+07:00"}
{"id":"gcodekit4-8","title":"Identify and plan additional development phases beyond Phase 7","description":"Plan and document future development phases (Phase 8+) to continue improving GCodeKit4 after completion of Phase 7 (Tasks 1-150).\n\nCurrent Status:\n- Phase 1-7: COMPLETE (150/150 tasks, 100%)\n- All core features implemented\n- 2D G-Code visualizer complete with interactive controls\n- ~530 tests, all passing\n\nPotential Phase 8+ Areas:\n\n1. **3D Visualization Enhancement**\n   - Full 3D toolpath rendering with OpenGL/WebGPU\n   - Multiple camera angles and projection modes\n   - Real-time tool animation during execution\n   - Material removal simulation\n   - Collision detection visualization\n\n2. **Advanced Machine Features**\n   - Tool library management\n   - Automatic tool change sequences\n   - Work offset management (G54-G59.3)\n   - Fixture and vise setup visualization\n   - Multi-axis support (4th/5th axis)\n\n3. **CAM Integration**\n   - Basic CAM operations (pocket, contour, drill)\n   - Import from popular CAM formats\n   - Post-processor system\n   - Toolpath optimization\n   - Feeds and speeds calculator\n\n4. **Network \u0026 Cloud Features**\n   - Remote machine monitoring\n   - Cloud storage for G-code files\n   - Machine usage statistics and analytics\n   - Multi-machine management dashboard\n   - Collaborative features\n\n5. **Advanced G-Code Features**\n   - Macro programming system\n   - Parametric G-code generation\n   - Conversational programming interface\n   - Tool wear compensation\n   - Advanced probing routines\n\n6. **Quality \u0026 Performance**\n   - Performance profiling and optimization\n   - Memory usage optimization\n   - Startup time improvements\n   - Plugin/extension system\n   - Scripting API (Lua/Python)\n\n7. **Documentation \u0026 Community**\n   - Video tutorials\n   - Interactive user guide\n   - API documentation site\n   - Plugin developer guide\n   - Community forum integration\n\n8. **Platform Expansion**\n   - Mobile companion app (iOS/Android)\n   - Web-based interface\n   - Raspberry Pi optimization\n   - Hardware integration (pendants, MPG)\n\nGoals:\n- Identify 3-5 high-value phases for Phase 8+\n- Define scope and task breakdown for each phase\n- Prioritize based on user needs and feasibility\n- Update PLAN.md with new phases\n- Create roadmap for next 12-24 months\n\nDeliverables:\n- Updated PLAN.md with Phase 8+ definitions\n- Task breakdown for next phase (Phase 8)\n- Prioritized feature list\n- Timeline estimates\n- Resource requirements","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:25:19.446178285+07:00","updated_at":"2025-10-28T16:25:47.371537195+07:00"}
{"id":"gcodekit4-9","title":"Analyze and fix communication system blocking UI events during file transmission","description":"Investigate and resolve UI blocking/freezing issues that occur when sending G-code files to the device through the communication system.\n\nProblem:\n- UI becomes unresponsive during G-code file transmission\n- Events are blocked or delayed while sending large files\n- User cannot interact with the interface during send operations\n- Application appears to hang or freeze\n\nCurrent Implementation:\n- Communication happens on separate threads\n- UI updates via Slint event loop\n- Timer-based state machine for non-blocking sends (implemented in v0.24.1)\n- Character-counting protocol for GRBL flow control\n\nInvestigation Areas:\n\n1. **Thread Communication**\n   - Review message passing between communication threads and UI\n   - Check for blocking operations in UI thread\n   - Analyze std::sync::mpsc channel usage\n   - Verify proper use of window.invoke_from_event_loop()\n\n2. **Send Operation Flow**\n   - Examine send_to_device implementation\n   - Review file chunking and batching strategy\n   - Check for synchronous operations that should be async\n   - Analyze acknowledgment tracking logic\n\n3. **UI Event Loop Integration**\n   - Verify Slint timer usage and frequency\n   - Check for long-running operations in callbacks\n   - Review window.invoke_from_event_loop() placement\n   - Ensure UI updates don't block on I/O\n\n4. **Resource Contention**\n   - Check for mutex/lock contention\n   - Analyze shared state access patterns\n   - Review Arc\u003cMutex\u003cT\u003e\u003e usage\n   - Identify potential deadlocks\n\n5. **Message Queue Management**\n   - Review channel buffer sizes\n   - Check for queue overflow conditions\n   - Analyze message processing rate\n   - Verify proper backpressure handling\n\nExpected Behavior:\n- UI remains fully responsive during file sends\n- User can cancel send operations at any time\n- Progress updates without UI freezing\n- Other UI controls remain functional\n- Console messages display in real-time\n\nPotential Solutions:\n1. Move more work off UI thread\n2. Reduce message passing frequency\n3. Batch UI updates more efficiently\n4. Use async/await for I/O operations\n5. Implement proper backpressure\n6. Add yield points in long operations\n7. Use dedicated worker threads for heavy tasks\n\nSuccess Criteria:\n- UI responds to user input during sends (\u003c100ms latency)\n- Progress bar updates smoothly\n- Console messages appear in real-time\n- Cancel button works immediately\n- No perceived freezing or hanging\n- All functionality remains accessible during transmission\n\nRelated:\n- v0.24.1 timer-based state machine implementation\n- Character-counting protocol for GRBL\n- UI timeout fixes previously implemented","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-28T23:09:09.217917019+07:00","updated_at":"2025-10-28T23:09:36.278737593+07:00"}

{"id":"gcodekit4-1","title":"fix visualizer","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:18:51.586800169+07:00","updated_at":"2025-10-28T14:44:49.896277199+07:00","closed_at":"2025-10-28T14:44:49.896277199+07:00"}
{"id":"gcodekit4-10","title":"Implement Designer tool for creating CNC designs and generating G-code","description":"Create an integrated CAD/CAM Designer tool that allows users to design CNC projects visually and generate G-code directly within GCodeKit4.\n\nVision:\n- Visual design tool for creating 2D/2.5D CNC projects\n- Intuitive drawing and editing interface\n- Parametric design capabilities\n- Direct G-code generation from designs\n- Library of common shapes and operations\n\nCore Features:\n\n1. **Drawing Tools**\n   - Basic shapes: Rectangle, Circle, Ellipse, Polygon\n   - Line and arc drawing (straight, arc, bezier)\n   - Text tool with multiple fonts (engrave or pocket)\n   - Boolean operations (union, subtract, intersect)\n   - Path editing and manipulation\n   - Snap-to-grid and object snapping\n   - Measurement and dimensioning tools\n\n2. **Design Operations**\n   - Offset paths (inward/outward)\n   - Array operations (linear, circular, grid)\n   - Mirror and rotate\n   - Scale and transform\n   - Chamfer and fillet\n   - Path smoothing and optimization\n   - Layer management\n\n3. **Toolpath Generation**\n   - Contour/profile operations\n   - Pocket operations (with island support)\n   - Drilling operations\n   - Engraving operations\n   - V-carving support\n   - Adaptive clearing\n   - Multiple pass depth control\n   - Stepover and stepdown settings\n\n4. **Tool Library**\n   - Define tool geometry (diameter, type, flutes)\n   - Cutting parameters (feed rate, plunge rate, RPM)\n   - Tool change management\n   - Tool path simulation\n   - Tool wear compensation\n   - Material-specific settings\n\n5. **Work Setup**\n   - Material dimensions and origin\n   - Fixture/holding setup\n   - Multiple work coordinate systems (G54-G59)\n   - Safe Z height configuration\n   - Rapid positioning settings\n   - Collision detection zones\n\n6. **G-Code Generation**\n   - Post-processor selection (GRBL, TinyG, etc.)\n   - Custom post-processor scripting\n   - G-code preview and verification\n   - Toolpath optimization\n   - Estimate machining time\n   - Generate setup sheets\n\n7. **File Management**\n   - Save/load design projects (.gk4design format)\n   - Import DXF, SVG, and other vector formats\n   - Export G-code with multiple post-processors\n   - Export toolpath visualization\n   - Template library for common projects\n\n8. **User Interface**\n   - Canvas with zoom, pan, rotate\n   - Property panel for selected objects\n   - Layers panel for organization\n   - Operations tree view\n   - Real-time preview with shading\n   - Units support (metric/imperial)\n\nTechnical Implementation:\n\n**UI Framework:**\n- Slint canvas widget for 2D drawing\n- Custom rendering for shapes and toolpaths\n- Interactive manipulation handles\n- Context-sensitive property editors\n\n**Geometry Engine:**\n- 2D computational geometry library (geo crate or similar)\n- Path offsetting and boolean operations\n- Arc/spline approximation\n- Intersection and collision detection\n\n**CAM Engine:**\n- Toolpath generation algorithms\n- Pocket clearing strategies (zigzag, spiral, adaptive)\n- Contour following with lead-in/lead-out\n- Drilling pattern generation\n- Simulation of material removal\n\n**G-Code Generator:**\n- Modular post-processor system\n- Template-based code generation\n- Support for multiple controller dialects\n- Comment and annotation support\n\n**Data Model:**\n- Design document structure\n- Parametric object definitions\n- Operation history for undo/redo\n- Layer and group management\n\nPhased Implementation:\n\n**Phase 1: Basic Drawing (MVP)**\n- Canvas with zoom/pan\n- Basic shapes (rectangle, circle, line)\n- Object selection and manipulation\n- Simple contour toolpath generation\n- G-code export for GRBL\n\n**Phase 2: Advanced Drawing**\n- Bezier curves and splines\n- Text support\n- Boolean operations\n- Path editing tools\n- Layer management\n\n**Phase 3: CAM Operations**\n- Pocket operations\n- Drilling patterns\n- Tool library\n- Multiple pass support\n- Toolpath simulation\n\n**Phase 4: Advanced Features**\n- Import DXF/SVG\n- Parametric designs\n- Array operations\n- V-carving\n- Adaptive clearing\n\n**Phase 5: Polish \u0026 Integration**\n- Template library\n- Custom post-processors\n- Design validation\n- Integration with visualizer\n- Performance optimization\n\nUser Workflows:\n\n1. **Simple Pocket:**\n   - Draw rectangle outline\n   - Select pocket operation\n   - Choose tool and parameters\n   - Generate G-code\n\n2. **Text Engraving:**\n   - Add text object\n   - Set font and size\n   - Choose engraving tool\n   - Generate V-carve or contour path\n\n3. **Multi-Operation Project:**\n   - Import DXF design\n   - Define multiple operations (drill, pocket, contour)\n   - Assign tools to each operation\n   - Simulate complete job\n   - Generate optimized G-code\n\nBenefits:\n- All-in-one solution (design + control)\n- No need for external CAD/CAM software\n- Integrated workflow from design to machining\n- Optimized G-code for target controller\n- Lower barrier to entry for beginners\n- Quick prototyping and iteration\n\nSuccess Criteria:\n- Users can create basic 2D designs without external tools\n- Generate working G-code for common operations\n- Intuitive UI that doesn't require CAM expertise\n- Performance: Handle designs with 1000+ objects smoothly\n- Integration: Seamlessly move from design to machining\n\nRelated Issues:\n- gcodekit4-8 (Future phases planning)\n- CAM integration mentioned in Phase 8+ potential areas","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:13:20.092530934+07:00","updated_at":"2025-10-28T23:14:05.278802595+07:00"}
{"id":"gcodekit4-11","title":"Implement CAM Tools Palette for storing and managing cutting tools","description":"Create a comprehensive CAM Tools Palette system for defining, organizing, and managing cutting tools with their parameters, geometry, and cutting characteristics.\n\nVision:\n- Centralized tool library for all CNC operations\n- Pre-defined tools for common operations\n- Custom tool creation and management\n- Tool parameter templates and presets\n- Material-specific cutting recommendations\n- Integration with Designer and G-code generation\n\nCore Features:\n\n1. **Tool Definition**\n   - Tool identification (number, name, description)\n   - Tool type classification:\n     * End mills (flat, ball, corner radius)\n     * V-bits (various angles: 60°, 90°, 120°)\n     * Drill bits (twist, spot, center)\n     * Engraving tools (diamond, carbide)\n     * Specialty tools (chamfer, dovetail, thread mill)\n   - Geometry parameters:\n     * Diameter (cutting diameter, shaft diameter)\n     * Length (overall length, flute length, reach)\n     * Number of flutes (1-4+)\n     * Helix angle\n     * Corner radius (for corner radius end mills)\n     * Point angle (for drills and v-bits)\n     * Tip diameter (for v-bits)\n   - Material specifications:\n     * Tool material (HSS, carbide, coated carbide, diamond)\n     * Coating type (TiN, TiAlN, diamond-like carbon)\n     * Shank type (straight, tapered, collet size)\n\n2. **Cutting Parameters**\n   - Spindle speed (RPM) - min/max/recommended\n   - Feed rate (mm/min or in/min) - by material\n   - Plunge rate (typically slower than feed rate)\n   - Stepover (percentage of tool diameter or absolute)\n   - Stepdown/Depth per pass (multiple passes)\n   - Ramp angle for entry moves\n   - Lead-in/lead-out distances\n   - Chip load calculations\n\n3. **Material-Specific Settings**\n   - Create material profiles:\n     * Hardwoods (oak, maple, walnut)\n     * Softwoods (pine, cedar, balsa)\n     * Plastics (acrylic, HDPE, PVC, polycarbonate)\n     * Metals (aluminum, brass, copper, steel)\n     * Composites (MDF, plywood, carbon fiber)\n   - Recommended parameters per material:\n     * RPM range\n     * Feed rates\n     * Depth of cut\n     * Finish pass settings\n   - Coolant/lubrication requirements\n   - Surface finish expectations\n\n4. **Tool Organization**\n   - Categories and subcategories:\n     * By type (end mills, drills, v-bits, etc.)\n     * By material (wood, plastic, metal)\n     * By operation (roughing, finishing, engraving)\n     * By diameter range\n   - Custom collections/favorites\n   - Import/export tool libraries\n   - Search and filter capabilities\n   - Sort by various criteria\n\n5. **Tool Library Management**\n   - Add new tools (manual or from presets)\n   - Edit existing tool parameters\n   - Duplicate tools for variations\n   - Delete unused tools\n   - Bulk operations (import/export)\n   - Version control for tool libraries\n   - Backup and restore\n\n6. **Integration Points**\n   - **Designer Tool:**\n     * Select tool from palette for operations\n     * Preview tool geometry in design view\n     * Tool-specific operation suggestions\n     * Automatic parameter population\n   - **G-Code Generation:**\n     * Tool change commands (M6)\n     * Spindle speed commands (M3/M4)\n     * Feed rate optimization\n     * Tool compensation (G41/G42)\n   - **Visualizer:**\n     * Display current tool in use\n     * Show tool paths with tool preview\n     * Simulate material removal with tool geometry\n\n7. **Tool Validation \u0026 Safety**\n   - Parameter validation (reasonable ranges)\n   - Compatibility checks (tool vs. material)\n   - Collision detection (tool length vs. work height)\n   - Feed rate limits based on machine capabilities\n   - Warning for aggressive parameters\n   - Safety factor calculations\n\n8. **Presets \u0026 Templates**\n   - Standard tool library included:\n     * Common 1/8\" and 1/4\" end mills\n     * Standard drill bit sets\n     * Popular v-bit angles\n     * Metric equivalents\n   - Material-optimized presets\n   - Import from popular CAM software formats\n   - Community-shared tool libraries\n   - Manufacturer tool databases\n\n9. **Tool Life Tracking** (Advanced)\n   - Track tool usage time\n   - Estimate tool wear\n   - Maintenance scheduling\n   - Replacement reminders\n   - Cost tracking per tool\n   - Historical performance data\n\n10. **Documentation \u0026 Help**\n    - Tool selection guide\n    - Feed and speed calculators\n    - Material recommendations\n    - Best practices tips\n    - Tutorial videos/guides\n    - Troubleshooting common issues\n\nData Model:\n\n```rust\nstruct Tool {\n    id: ToolId,\n    name: String,\n    tool_number: u32,\n    description: String,\n    category: ToolCategory,\n    \n    // Geometry\n    diameter: f64,              // mm\n    shaft_diameter: Option\u003cf64\u003e,\n    length: f64,\n    flute_length: f64,\n    flutes: u32,\n    corner_radius: Option\u003cf64\u003e,\n    tip_angle: Option\u003cf64\u003e,     // degrees\n    \n    // Material\n    material: ToolMaterial,\n    coating: Option\u003cToolCoating\u003e,\n    \n    // Cutting parameters (defaults)\n    default_rpm: u32,\n    rpm_range: (u32, u32),      // min, max\n    \n    // Material-specific settings\n    material_settings: HashMap\u003cMaterial, CuttingParameters\u003e,\n    \n    // Metadata\n    manufacturer: Option\u003cString\u003e,\n    part_number: Option\u003cString\u003e,\n    cost: Option\u003cf64\u003e,\n    notes: String,\n    \n    // Usage tracking\n    total_time: Duration,\n    last_used: Option\u003cDateTime\u003e,\n}\n\nstruct CuttingParameters {\n    rpm: u32,\n    feed_rate: f64,             // mm/min\n    plunge_rate: f64,           // mm/min\n    stepover_percent: f64,      // percentage of diameter\n    depth_per_pass: f64,        // mm\n    finish_pass_depth: Option\u003cf64\u003e,\n}\n```\n\nUser Interface:\n\n**Tools Palette Panel:**\n- Sidebar panel (collapsible)\n- Tool browser with thumbnails\n- Category filters\n- Search box\n- Quick access to favorites\n- Tool preview with specs\n- \"Add Tool\" button\n\n**Tool Editor Dialog:**\n- Tabbed interface:\n  * General (name, number, type)\n  * Geometry (dimensions, flutes)\n  * Parameters (speeds, feeds)\n  * Materials (per-material settings)\n  * Advanced (tracking, notes)\n- Visual tool preview\n- Parameter validation\n- Save/Cancel buttons\n\n**Tool Selector Widget:**\n- Used in Designer operations\n- Dropdown or searchable list\n- Shows key specs in preview\n- Quick \"Edit\" button\n- Recent/favorite tools highlighted\n\nFile Format:\n\n**.gk4tools (Tool Library File):**\n- JSON or TOML format\n- Human-readable\n- Version controlled\n- Supports comments\n- Example:\n```toml\n[tool.1]\nname = \"1/4 inch Flat End Mill\"\nnumber = 1\ntype = \"end_mill_flat\"\ndiameter = 6.35\nflutes = 2\nlength = 50.0\nmaterial = \"carbide\"\n\n[tool.1.wood_hardwood]\nrpm = 18000\nfeed_rate = 1500\nstepover = 40.0\ndepth_per_pass = 3.0\n```\n\nImplementation Phases:\n\n**Phase 1: Core Library**\n- Basic tool data structure\n- Add/edit/delete tools\n- Simple list view\n- Save/load tool libraries\n\n**Phase 2: Parameters \u0026 Materials**\n- Material-specific cutting parameters\n- Parameter validation\n- Feed/speed calculations\n- Tool preview rendering\n\n**Phase 3: Organization \u0026 Search**\n- Categories and collections\n- Search and filter\n- Favorites system\n- Import/export\n\n**Phase 4: Integration**\n- Connect to Designer tool\n- G-code generation integration\n- Visualizer tool display\n- Parameter auto-population\n\n**Phase 5: Advanced Features**\n- Tool life tracking\n- Presets and templates\n- Community library\n- Usage analytics\n\nSuccess Criteria:\n- Users can define and save custom tools\n- Tool parameters integrate with Designer operations\n- Library includes 50+ common tools out of box\n- Tool selection is intuitive and quick\n- Parameters are validated and safe\n- Libraries can be shared between users\n\nBenefits:\n- Consistent tool definitions across projects\n- Eliminate parameter entry errors\n- Material-optimized cutting parameters\n- Faster workflow (no manual parameter lookup)\n- Knowledge base of proven tool/material combos\n- Professional toolpath generation\n\nRelated Issues:\n- gcodekit4-10 (Designer tool - primary consumer)\n- gcodekit4-8 (Phase 8+ planning - CAM integration)","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:16:12.772626623+07:00","updated_at":"2025-10-28T23:17:18.725290493+07:00"}
{"id":"gcodekit4-12","title":"Implement CAM Tools Palette for storing and managing cutting tools","description":"","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:17:18.78045434+07:00","updated_at":"2025-10-28T23:19:25.165548086+07:00","closed_at":"2025-10-28T23:19:25.165548086+07:00"}
{"id":"gcodekit4-2","title":"Reorganize visualizer controls into single toolbar row with pan buttons on right","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:56:57.51401382+07:00","updated_at":"2025-10-28T16:09:54.247582625+07:00","closed_at":"2025-10-28T16:09:54.247582625+07:00"}
{"id":"gcodekit4-3","title":"Review and improve visualizer world coordinates and fit-to-window function","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-28T16:10:12.206718734+07:00","updated_at":"2025-10-28T16:10:12.206718734+07:00"}
{"id":"gcodekit4-4","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"Move all remaining inline #[cfg(test)] tests from source files to the tests/ directory, organized by module hierarchy.\n\nScope:\n- Identify all modules with inline tests in src/\n- Create corresponding test files in tests/ organized by module structure\n- Convert inline unit tests to integration tests testing public API\n- Remove #[cfg(test)] blocks from source files\n- Ensure all tests focus on public API, not internal implementation\n- Follow AGENTS.md guidelines for test organization\n\nBenefits:\n- Consistent test organization across entire codebase\n- Better separation of test code from implementation\n- Tests verify public contracts, not implementation details\n- Easier to find and maintain tests\n- Follows Rust best practices and AGENTS.md standards\n\nReference: Visualizer module migration completed in gcodekit4-1 (28 → 102 tests)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:25.663259692+07:00","updated_at":"2025-10-28T16:20:42.177487534+07:00"}
{"id":"gcodekit4-5","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:42.276578747+07:00","updated_at":"2025-10-28T16:21:17.711282027+07:00","closed_at":"2025-10-28T16:21:17.711282027+07:00"}
{"id":"gcodekit4-6","title":"Increase test coverage to at least 600 comprehensive tests","description":"Expand test coverage from current ~530 tests to at least 600 comprehensive tests across all modules.\n\nCurrent Status:\n- Total tests: ~530\n- Visualizer: 102 integration tests (recently migrated)\n- Phase 7: 40 tests\n- Phase 6/7 UI: 27 tests\n- Other modules: ~361 tests\n\nTarget Coverage Areas:\n1. Communication Module\n   - Serial/TCP/WebSocket connection tests\n   - Message parsing and protocol tests\n   - Error handling and reconnection logic\n   - Flow control and buffer management\n\n2. G-Code Parser \u0026 Preprocessors\n   - All 14 preprocessor tests\n   - Edge cases and error conditions\n   - Arc expansion and coordinate transformations\n   - Mesh leveling and calibration\n\n3. Firmware Controllers\n   - GRBL, TinyG, g2core, FluidNC, Smoothieware\n   - Command parsing and response handling\n   - State machine transitions\n   - Override and real-time commands\n\n4. Core Module\n   - Event system tests\n   - State management\n   - Message handling\n   - Controller lifecycle\n\n5. UI Module\n   - Component behavior tests\n   - State synchronization\n   - User interaction flows\n   - Error handling and validation\n\n6. Utilities\n   - File I/O operations\n   - Data processing\n   - Export functionality\n   - Configuration management\n\nGoals:\n- 600+ total tests (70 new tests minimum)\n- All tests in tests/ folder (no inline tests)\n- Focus on integration tests testing public API\n- Comprehensive edge case coverage\n- Error condition testing\n- Realistic usage scenarios\n\nBenefits:\n- Higher confidence in code correctness\n- Better regression detection\n- Improved maintainability\n- Documentation through tests\n- Production-ready quality assurance","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:16.585029885+07:00","updated_at":"2025-10-28T16:22:51.744349745+07:00"}
{"id":"gcodekit4-7","title":"Increase test coverage to at least 600 comprehensive tests","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:52.318210331+07:00","updated_at":"2025-10-28T16:23:40.454446454+07:00","closed_at":"2025-10-28T16:23:40.454446454+07:00"}
{"id":"gcodekit4-8","title":"Identify and plan additional development phases beyond Phase 7","description":"Plan and document future development phases (Phase 8+) to continue improving GCodeKit4 after completion of Phase 7 (Tasks 1-150).\n\nCurrent Status:\n- Phase 1-7: COMPLETE (150/150 tasks, 100%)\n- All core features implemented\n- 2D G-Code visualizer complete with interactive controls\n- ~530 tests, all passing\n\nPotential Phase 8+ Areas:\n\n1. **3D Visualization Enhancement**\n   - Full 3D toolpath rendering with OpenGL/WebGPU\n   - Multiple camera angles and projection modes\n   - Real-time tool animation during execution\n   - Material removal simulation\n   - Collision detection visualization\n\n2. **Advanced Machine Features**\n   - Tool library management\n   - Automatic tool change sequences\n   - Work offset management (G54-G59.3)\n   - Fixture and vise setup visualization\n   - Multi-axis support (4th/5th axis)\n\n3. **CAM Integration**\n   - Basic CAM operations (pocket, contour, drill)\n   - Import from popular CAM formats\n   - Post-processor system\n   - Toolpath optimization\n   - Feeds and speeds calculator\n\n4. **Network \u0026 Cloud Features**\n   - Remote machine monitoring\n   - Cloud storage for G-code files\n   - Machine usage statistics and analytics\n   - Multi-machine management dashboard\n   - Collaborative features\n\n5. **Advanced G-Code Features**\n   - Macro programming system\n   - Parametric G-code generation\n   - Conversational programming interface\n   - Tool wear compensation\n   - Advanced probing routines\n\n6. **Quality \u0026 Performance**\n   - Performance profiling and optimization\n   - Memory usage optimization\n   - Startup time improvements\n   - Plugin/extension system\n   - Scripting API (Lua/Python)\n\n7. **Documentation \u0026 Community**\n   - Video tutorials\n   - Interactive user guide\n   - API documentation site\n   - Plugin developer guide\n   - Community forum integration\n\n8. **Platform Expansion**\n   - Mobile companion app (iOS/Android)\n   - Web-based interface\n   - Raspberry Pi optimization\n   - Hardware integration (pendants, MPG)\n\nGoals:\n- Identify 3-5 high-value phases for Phase 8+\n- Define scope and task breakdown for each phase\n- Prioritize based on user needs and feasibility\n- Update PLAN.md with new phases\n- Create roadmap for next 12-24 months\n\nDeliverables:\n- Updated PLAN.md with Phase 8+ definitions\n- Task breakdown for next phase (Phase 8)\n- Prioritized feature list\n- Timeline estimates\n- Resource requirements","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:25:19.446178285+07:00","updated_at":"2025-10-28T16:25:47.371537195+07:00"}
{"id":"gcodekit4-9","title":"Analyze and fix communication system blocking UI events during file transmission","description":"Investigate and resolve UI blocking/freezing issues that occur when sending G-code files to the device through the communication system.\n\nProblem:\n- UI becomes unresponsive during G-code file transmission\n- Events are blocked or delayed while sending large files\n- User cannot interact with the interface during send operations\n- Application appears to hang or freeze\n\nCurrent Implementation:\n- Communication happens on separate threads\n- UI updates via Slint event loop\n- Timer-based state machine for non-blocking sends (implemented in v0.24.1)\n- Character-counting protocol for GRBL flow control\n\nInvestigation Areas:\n\n1. **Thread Communication**\n   - Review message passing between communication threads and UI\n   - Check for blocking operations in UI thread\n   - Analyze std::sync::mpsc channel usage\n   - Verify proper use of window.invoke_from_event_loop()\n\n2. **Send Operation Flow**\n   - Examine send_to_device implementation\n   - Review file chunking and batching strategy\n   - Check for synchronous operations that should be async\n   - Analyze acknowledgment tracking logic\n\n3. **UI Event Loop Integration**\n   - Verify Slint timer usage and frequency\n   - Check for long-running operations in callbacks\n   - Review window.invoke_from_event_loop() placement\n   - Ensure UI updates don't block on I/O\n\n4. **Resource Contention**\n   - Check for mutex/lock contention\n   - Analyze shared state access patterns\n   - Review Arc\u003cMutex\u003cT\u003e\u003e usage\n   - Identify potential deadlocks\n\n5. **Message Queue Management**\n   - Review channel buffer sizes\n   - Check for queue overflow conditions\n   - Analyze message processing rate\n   - Verify proper backpressure handling\n\nExpected Behavior:\n- UI remains fully responsive during file sends\n- User can cancel send operations at any time\n- Progress updates without UI freezing\n- Other UI controls remain functional\n- Console messages display in real-time\n\nPotential Solutions:\n1. Move more work off UI thread\n2. Reduce message passing frequency\n3. Batch UI updates more efficiently\n4. Use async/await for I/O operations\n5. Implement proper backpressure\n6. Add yield points in long operations\n7. Use dedicated worker threads for heavy tasks\n\nSuccess Criteria:\n- UI responds to user input during sends (\u003c100ms latency)\n- Progress bar updates smoothly\n- Console messages appear in real-time\n- Cancel button works immediately\n- No perceived freezing or hanging\n- All functionality remains accessible during transmission\n\nRelated:\n- v0.24.1 timer-based state machine implementation\n- Character-counting protocol for GRBL\n- UI timeout fixes previously implemented","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-28T23:09:09.217917019+07:00","updated_at":"2025-10-28T23:09:36.278737593+07:00"}

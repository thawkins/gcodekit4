{"id":"gcodekit4-1","title":"fix visualizer","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:18:51.586800169+07:00","updated_at":"2025-10-28T14:44:49.896277199+07:00","closed_at":"2025-10-28T14:44:49.896277199+07:00"}
{"id":"gcodekit4-10","title":"Implement Designer tool for creating CNC designs and generating G-code","description":"Create an integrated CAD/CAM Designer tool that allows users to design CNC projects visually and generate G-code directly within GCodeKit4.\n\n**Phase 1 MVP Scope:**\n- Canvas with zoom/pan\n- Basic shapes (rectangle, circle, line)\n- Object selection and manipulation\n- Simple contour toolpath generation\n- G-code export to G-Code Editor (for sending to device or saving from there)\n\nVision:\n- Visual design tool for creating 2D/2.5D CNC projects\n- Intuitive drawing and editing interface\n- Parametric design capabilities\n- Direct G-code generation from designs\n- Library of common shapes and operations\n\nCore Features (Future Phases):\n\n1. **Drawing Tools**\n   - Basic shapes: Rectangle, Circle, Ellipse, Polygon\n   - Line and arc drawing (straight, arc, bezier)\n   - Text tool with multiple fonts (engrave or pocket)\n   - Boolean operations (union, subtract, intersect)\n   - Path editing and manipulation\n   - Snap-to-grid and object snapping\n   - Measurement and dimensioning tools\n\n2. **Design Operations**\n   - Offset paths (inward/outward)\n   - Array operations (linear, circular, grid)\n   - Mirror and rotate\n   - Scale and transform\n   - Chamfer and fillet\n   - Path smoothing and optimization\n   - Layer management\n\n3. **Toolpath Generation**\n   - Contour/profile operations\n   - Pocket operations (with island support)\n   - Drilling operations\n   - Engraving operations\n   - V-carving support\n   - Adaptive clearing\n   - Multiple pass depth control\n   - Stepover and stepdown settings\n\n4. **Tool Library**\n   - Define tool geometry (diameter, type, flutes)\n   - Cutting parameters (feed rate, plunge rate, RPM)\n   - Tool change management\n   - Tool path simulation\n   - Tool wear compensation\n   - Material-specific settings\n\n5. **Work Setup**\n   - Material dimensions and origin\n   - Fixture/holding setup\n   - Multiple work coordinate systems (G54-G59)\n   - Safe Z height configuration\n   - Rapid positioning settings\n   - Collision detection zones\n\n6. **G-Code Generation**\n   - Post-processor selection (GRBL, TinyG, etc.)\n   - Custom post-processor scripting\n   - G-code preview and verification\n   - Toolpath optimization\n   - Estimate machining time\n   - Generate setup sheets\n\n7. **File Management**\n   - Save/load design projects (.gk4design format)\n   - Import DXF, SVG, and other vector formats\n   - Export G-code with multiple post-processors\n   - Export toolpath visualization\n   - Template library for common projects\n\n8. **User Interface**\n   - Canvas with zoom, pan, rotate\n   - Property panel for selected objects\n   - Layers panel for organization\n   - Operations tree view\n   - Real-time preview with shading\n   - Units support (metric/imperial)\n\nPhased Implementation:\n\n**Phase 1: Basic Drawing (MVP)**\n- Canvas with zoom/pan\n- Basic shapes (rectangle, circle, line)\n- Object selection and manipulation\n- Simple contour toolpath generation\n- G-code export to G-Code Editor\n\n**Phase 2: Advanced Drawing**\n- Bezier curves and splines\n- Text support\n- Boolean operations\n- Path editing tools\n- Layer management\n\n**Phase 3: CAM Operations**\n- Pocket operations\n- Drilling patterns\n- Tool library\n- Multiple pass support\n- Toolpath simulation\n\n**Phase 4: Advanced Features**\n- Import DXF/SVG\n- Parametric designs\n- Array operations\n- V-carving\n- Adaptive clearing\n\n**Phase 5: Polish \\u0026 Integration**\n- Template library\n- Custom post-processors\n- Design validation\n- Integration with visualizer\n- Performance optimization\n\nSuccess Criteria:\n- Users can create basic 2D designs without external tools\n- Generate working G-code for common operations\n- Intuitive UI that doesn't require CAM expertise\n- Performance: Handle designs with 1000+ objects smoothly\n- Integration: Seamlessly move from design to machining","notes":"Phase 1 MVP complete but pending review - do not close automatically","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:13:20.092530934+07:00","updated_at":"2025-10-29T16:18:51.291950157+07:00"}
{"id":"gcodekit4-11","title":"Implement CAM Tools Palette for storing and managing cutting tools","description":"Create a comprehensive CAM Tools Palette system for defining, organizing, and managing cutting tools with their parameters, geometry, and cutting characteristics.\n\nVision:\n- Centralized tool library for all CNC operations\n- Pre-defined tools for common operations\n- Custom tool creation and management\n- Tool parameter templates and presets\n- Material-specific cutting recommendations\n- Integration with Designer and G-code generation\n\nCore Features:\n\n1. **Tool Definition**\n   - Tool identification (number, name, description)\n   - Tool type classification:\n     * End mills (flat, ball, corner radius)\n     * V-bits (various angles: 60°, 90°, 120°)\n     * Drill bits (twist, spot, center)\n     * Engraving tools (diamond, carbide)\n     * Specialty tools (chamfer, dovetail, thread mill)\n   - Geometry parameters:\n     * Diameter (cutting diameter, shaft diameter)\n     * Length (overall length, flute length, reach)\n     * Number of flutes (1-4+)\n     * Helix angle\n     * Corner radius (for corner radius end mills)\n     * Point angle (for drills and v-bits)\n     * Tip diameter (for v-bits)\n   - Material specifications:\n     * Tool material (HSS, carbide, coated carbide, diamond)\n     * Coating type (TiN, TiAlN, diamond-like carbon)\n     * Shank type (straight, tapered, collet size)\n\n2. **Cutting Parameters**\n   - Spindle speed (RPM) - min/max/recommended\n   - Feed rate (mm/min or in/min) - by material\n   - Plunge rate (typically slower than feed rate)\n   - Stepover (percentage of tool diameter or absolute)\n   - Stepdown/Depth per pass (multiple passes)\n   - Ramp angle for entry moves\n   - Lead-in/lead-out distances\n   - Chip load calculations\n\n3. **Material-Specific Settings**\n   - Create material profiles:\n     * Hardwoods (oak, maple, walnut)\n     * Softwoods (pine, cedar, balsa)\n     * Plastics (acrylic, HDPE, PVC, polycarbonate)\n     * Metals (aluminum, brass, copper, steel)\n     * Composites (MDF, plywood, carbon fiber)\n   - Recommended parameters per material:\n     * RPM range\n     * Feed rates\n     * Depth of cut\n     * Finish pass settings\n   - Coolant/lubrication requirements\n   - Surface finish expectations\n\n4. **Tool Organization**\n   - Categories and subcategories:\n     * By type (end mills, drills, v-bits, etc.)\n     * By material (wood, plastic, metal)\n     * By operation (roughing, finishing, engraving)\n     * By diameter range\n   - Custom collections/favorites\n   - Import/export tool libraries\n   - Search and filter capabilities\n   - Sort by various criteria\n\n5. **Tool Library Management**\n   - Add new tools (manual or from presets)\n   - Edit existing tool parameters\n   - Duplicate tools for variations\n   - Delete unused tools\n   - Bulk operations (import/export)\n   - Version control for tool libraries\n   - Backup and restore\n\n6. **Integration Points**\n   - **Designer Tool:**\n     * Select tool from palette for operations\n     * Preview tool geometry in design view\n     * Tool-specific operation suggestions\n     * Automatic parameter population\n   - **G-Code Generation:**\n     * Tool change commands (M6)\n     * Spindle speed commands (M3/M4)\n     * Feed rate optimization\n     * Tool compensation (G41/G42)\n   - **Visualizer:**\n     * Display current tool in use\n     * Show tool paths with tool preview\n     * Simulate material removal with tool geometry\n\n7. **Tool Validation \u0026 Safety**\n   - Parameter validation (reasonable ranges)\n   - Compatibility checks (tool vs. material)\n   - Collision detection (tool length vs. work height)\n   - Feed rate limits based on machine capabilities\n   - Warning for aggressive parameters\n   - Safety factor calculations\n\n8. **Presets \u0026 Templates**\n   - Standard tool library included:\n     * Common 1/8\" and 1/4\" end mills\n     * Standard drill bit sets\n     * Popular v-bit angles\n     * Metric equivalents\n   - Material-optimized presets\n   - Import from popular CAM software formats\n   - Community-shared tool libraries\n   - Manufacturer tool databases\n\n9. **Tool Life Tracking** (Advanced)\n   - Track tool usage time\n   - Estimate tool wear\n   - Maintenance scheduling\n   - Replacement reminders\n   - Cost tracking per tool\n   - Historical performance data\n\n10. **Documentation \u0026 Help**\n    - Tool selection guide\n    - Feed and speed calculators\n    - Material recommendations\n    - Best practices tips\n    - Tutorial videos/guides\n    - Troubleshooting common issues\n\nData Model:\n\n```rust\nstruct Tool {\n    id: ToolId,\n    name: String,\n    tool_number: u32,\n    description: String,\n    category: ToolCategory,\n    \n    // Geometry\n    diameter: f64,              // mm\n    shaft_diameter: Option\u003cf64\u003e,\n    length: f64,\n    flute_length: f64,\n    flutes: u32,\n    corner_radius: Option\u003cf64\u003e,\n    tip_angle: Option\u003cf64\u003e,     // degrees\n    \n    // Material\n    material: ToolMaterial,\n    coating: Option\u003cToolCoating\u003e,\n    \n    // Cutting parameters (defaults)\n    default_rpm: u32,\n    rpm_range: (u32, u32),      // min, max\n    \n    // Material-specific settings\n    material_settings: HashMap\u003cMaterial, CuttingParameters\u003e,\n    \n    // Metadata\n    manufacturer: Option\u003cString\u003e,\n    part_number: Option\u003cString\u003e,\n    cost: Option\u003cf64\u003e,\n    notes: String,\n    \n    // Usage tracking\n    total_time: Duration,\n    last_used: Option\u003cDateTime\u003e,\n}\n\nstruct CuttingParameters {\n    rpm: u32,\n    feed_rate: f64,             // mm/min\n    plunge_rate: f64,           // mm/min\n    stepover_percent: f64,      // percentage of diameter\n    depth_per_pass: f64,        // mm\n    finish_pass_depth: Option\u003cf64\u003e,\n}\n```\n\nUser Interface:\n\n**Tools Palette Panel:**\n- Sidebar panel (collapsible)\n- Tool browser with thumbnails\n- Category filters\n- Search box\n- Quick access to favorites\n- Tool preview with specs\n- \"Add Tool\" button\n\n**Tool Editor Dialog:**\n- Tabbed interface:\n  * General (name, number, type)\n  * Geometry (dimensions, flutes)\n  * Parameters (speeds, feeds)\n  * Materials (per-material settings)\n  * Advanced (tracking, notes)\n- Visual tool preview\n- Parameter validation\n- Save/Cancel buttons\n\n**Tool Selector Widget:**\n- Used in Designer operations\n- Dropdown or searchable list\n- Shows key specs in preview\n- Quick \"Edit\" button\n- Recent/favorite tools highlighted\n\nFile Format:\n\n**.gk4tools (Tool Library File):**\n- JSON or TOML format\n- Human-readable\n- Version controlled\n- Supports comments\n- Example:\n```toml\n[tool.1]\nname = \"1/4 inch Flat End Mill\"\nnumber = 1\ntype = \"end_mill_flat\"\ndiameter = 6.35\nflutes = 2\nlength = 50.0\nmaterial = \"carbide\"\n\n[tool.1.wood_hardwood]\nrpm = 18000\nfeed_rate = 1500\nstepover = 40.0\ndepth_per_pass = 3.0\n```\n\nImplementation Phases:\n\n**Phase 1: Core Library**\n- Basic tool data structure\n- Add/edit/delete tools\n- Simple list view\n- Save/load tool libraries\n\n**Phase 2: Parameters \u0026 Materials**\n- Material-specific cutting parameters\n- Parameter validation\n- Feed/speed calculations\n- Tool preview rendering\n\n**Phase 3: Organization \u0026 Search**\n- Categories and collections\n- Search and filter\n- Favorites system\n- Import/export\n\n**Phase 4: Integration**\n- Connect to Designer tool\n- G-code generation integration\n- Visualizer tool display\n- Parameter auto-population\n\n**Phase 5: Advanced Features**\n- Tool life tracking\n- Presets and templates\n- Community library\n- Usage analytics\n\nSuccess Criteria:\n- Users can define and save custom tools\n- Tool parameters integrate with Designer operations\n- Library includes 50+ common tools out of box\n- Tool selection is intuitive and quick\n- Parameters are validated and safe\n- Libraries can be shared between users\n\nBenefits:\n- Consistent tool definitions across projects\n- Eliminate parameter entry errors\n- Material-optimized cutting parameters\n- Faster workflow (no manual parameter lookup)\n- Knowledge base of proven tool/material combos\n- Professional toolpath generation\n\nRelated Issues:\n- gcodekit4-10 (Designer tool - primary consumer)\n- gcodekit4-8 (Phase 8+ planning - CAM integration)","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:16:12.772626623+07:00","updated_at":"2025-10-29T16:18:51.894738196+07:00"}
{"id":"gcodekit4-12","title":"Implement CAM Tools Palette for storing and managing cutting tools","description":"","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:17:18.78045434+07:00","updated_at":"2025-10-28T23:19:25.165548086+07:00","closed_at":"2025-10-28T23:19:25.165548086+07:00"}
{"id":"gcodekit4-13","title":"Implement Materials Database with CAM tools integration","description":"Create a comprehensive Materials Database that links with CAM tools to provide material-specific machining parameters, properties, and recommendations.\n\nVision:\n- Centralized database of CNC materials (woods, plastics, metals, composites)\n- Material properties and characteristics\n- Recommended cutting parameters per material\n- Bidirectional integration with CAM Tools Palette\n- Material selection guides and best practices\n- User-extensible with custom materials\n\nCore Features:\n\n1. **Material Categories \u0026 Types**\n   \n   **Woods:**\n   - Hardwoods: Oak, Maple, Walnut, Cherry, Ash, Birch\n   - Softwoods: Pine, Cedar, Spruce, Fir, Redwood, Balsa\n   - Engineered: MDF, Plywood, Particleboard, OSB, LDF\n   - Exotic: Teak, Mahogany, Rosewood, Ebony, Zebrawood\n   \n   **Plastics:**\n   - Acrylics: PMMA, Plexiglass, Lucite\n   - Engineering: ABS, PVC, HDPE, LDPE, Polycarbonate, Nylon\n   - Specialty: Delrin (POM), PEEK, PTFE (Teflon), Ultem\n   - Foams: EPS, XPS, EVA, Polyurethane\n   \n   **Metals:**\n   - Non-ferrous: Aluminum (6061, 7075), Brass, Copper, Bronze\n   - Ferrous: Mild Steel, Stainless Steel, Tool Steel\n   - Precious: Gold, Silver, Platinum (jewelry)\n   - Specialty: Titanium, Magnesium\n   \n   **Composites:**\n   - Carbon Fiber\n   - Fiberglass (G10/FR4)\n   - Phenolic\n   - Kevlar\n   \n   **Stone \u0026 Ceramics:**\n   - Marble, Granite, Soapstone\n   - Corian, Tile, Glass\n\n2. **Material Properties**\n   \n   **Physical Properties:**\n   - Density (g/cm³ or kg/m³)\n   - Hardness (Brinell, Rockwell, Janka for wood)\n   - Tensile strength\n   - Compressive strength\n   - Melting point / Glass transition temperature\n   - Thermal conductivity\n   - Coefficient of thermal expansion\n   \n   **Machining Properties:**\n   - Machinability rating (1-10 scale)\n   - Chip formation characteristics\n   - Tendency to work harden\n   - Surface finish achievability\n   - Burr formation tendency\n   - Heat sensitivity\n   - Abrasiveness (tool wear factor)\n   \n   **Safety \u0026 Handling:**\n   - Dust hazards (toxicity, flammability)\n   - Fume hazards when cutting\n   - Required PPE (Personal Protective Equipment)\n   - Coolant/lubrication requirements\n   - Static electricity concerns\n   - Fire/explosion risks\n   - Disposal requirements\n\n3. **Cutting Parameter Recommendations**\n   \n   **For Each Material:**\n   - RPM ranges by tool type and diameter\n   - Feed rate ranges (roughing vs. finishing)\n   - Plunge rate recommendations\n   - Depth of cut (DOC) guidelines\n   - Stepover percentages\n   - Climb vs. conventional milling preference\n   - Optimal chip load by tool size\n   - Finish pass parameters\n   \n   **Tool-Material Matrix:**\n   - Best tool types for material\n   - Tool geometry recommendations (helix angle, flutes)\n   - Tool material selection (HSS vs. Carbide)\n   - Coating recommendations (TiN, TiAlN for metals)\n   - Tool life expectancy\n   \n   **Operation-Specific:**\n   - Contour cutting parameters\n   - Pocket clearing strategies\n   - Drilling recommendations\n   - Engraving settings\n   - V-carving depths\n\n4. **Material Selection \u0026 Guidance**\n   \n   **Selection Wizard:**\n   - Filter by category\n   - Filter by properties (hardness, strength)\n   - Filter by machining difficulty\n   - Search by name or characteristics\n   - Compare materials side-by-side\n   \n   **Recommendations:**\n   - \"Similar materials\" suggestions\n   - \"Easier alternatives\" for beginners\n   - Cost considerations\n   - Availability information\n   - Typical applications/uses\n   \n   **Best Practices:**\n   - Workholding recommendations\n   - Dust collection requirements\n   - Finishing techniques\n   - Common issues and solutions\n   - Tips and tricks per material\n\n5. **Integration with CAM Tools Palette**\n   \n   **Bidirectional Linking:**\n   - Material → Recommended tools\n   - Tool → Compatible materials\n   - Auto-populate parameters when tool + material selected\n   - Override warnings for non-optimal combinations\n   \n   **Smart Parameter Selection:**\n   - When user selects material in Designer:\n     * Suggest appropriate tools from palette\n     * Auto-fill cutting parameters\n     * Display material warnings/notes\n   - When user selects tool:\n     * Show compatible materials\n     * Highlight optimal materials\n     * Display parameter adjustments needed\n   \n   **Parameter Validation:**\n   - Warn if parameters outside recommended range\n   - Flag aggressive settings for material\n   - Suggest parameter corrections\n   - Calculate safety factors\n\n6. **Custom Materials \u0026 User Extensions**\n   \n   **Add Custom Materials:**\n   - User-defined material entries\n   - Clone existing and modify\n   - Full property editing\n   - Custom cutting parameters\n   - Private or shareable\n   \n   **Community Library:**\n   - Share custom materials\n   - Import community materials\n   - Rate and review materials\n   - Update from community\n   \n   **Material Testing:**\n   - Record test cut results\n   - Iterate parameters\n   - Save successful combinations\n   - Build knowledge base\n\n7. **Material Cost \u0026 Inventory** (Advanced)\n   \n   **Cost Tracking:**\n   - Price per unit (board foot, sheet, kg)\n   - Supplier information\n   - Cost estimation for projects\n   - Material waste calculations\n   \n   **Inventory Management:**\n   - Track material stock\n   - Low stock alerts\n   - Reorder reminders\n   - Usage history\n   - Material expiration (for adhesives, resins)\n\n8. **Documentation \u0026 Resources**\n   \n   **Per Material:**\n   - Datasheet/specification sheet\n   - Safety Data Sheet (SDS)\n   - Machining guide\n   - Video tutorials\n   - External reference links\n   \n   **General Resources:**\n   - Material selection guide\n   - Troubleshooting common issues\n   - Feeds and speeds calculator\n   - Chip load calculator\n   - Tool life estimator\n\nData Model:\n\n```rust\nstruct Material {\n    id: MaterialId,\n    name: String,\n    category: MaterialCategory,\n    subcategory: String,\n    \n    // Properties\n    density: f64,              // kg/m³\n    hardness: Hardness,\n    machinability_rating: u8,  // 1-10\n    \n    // Physical properties\n    tensile_strength: Option\u003cf64\u003e,\n    melting_point: Option\u003cf64\u003e,\n    thermal_expansion: Option\u003cf64\u003e,\n    \n    // Machining characteristics\n    chip_formation: ChipType,\n    heat_sensitivity: HeatSensitivity,\n    abrasiveness: Abrasiveness,\n    surface_finish: SurfaceFinishability,\n    \n    // Safety\n    dust_hazard: HazardLevel,\n    fume_hazard: HazardLevel,\n    required_ppe: Vec\u003cPPE\u003e,\n    coolant_required: bool,\n    \n    // Cutting parameters by tool type\n    cutting_params: HashMap\u003cToolType, MaterialCuttingParams\u003e,\n    \n    // Tool compatibility\n    recommended_tools: Vec\u003cToolId\u003e,\n    incompatible_tools: Vec\u003cToolId\u003e,\n    \n    // Metadata\n    cost_per_unit: Option\u003cf64\u003e,\n    suppliers: Vec\u003cSupplier\u003e,\n    typical_applications: Vec\u003cString\u003e,\n    notes: String,\n    \n    // User data\n    custom: bool,\n    user_rating: Option\u003cu8\u003e,\n    test_results: Vec\u003cTestResult\u003e,\n}\n\nstruct MaterialCuttingParams {\n    rpm_range: (u32, u32),\n    feed_rate_range: (f64, f64),\n    plunge_rate_factor: f64,    // Percentage of feed rate\n    max_doc: f64,                // Maximum depth of cut\n    stepover_percent: (f64, f64), // Min, max\n    finish_pass_params: FinishParams,\n    coolant_type: Option\u003cCoolantType\u003e,\n}\n```\n\nUser Interface:\n\n**Materials Panel:**\n- Tree view by category\n- Material cards with key properties\n- Search and filter tools\n- \"Add Material\" button\n- Favorites/recent materials\n\n**Material Editor:**\n- Tabbed interface:\n  * General (name, category, description)\n  * Properties (physical, mechanical)\n  * Machining (parameters by tool type)\n  * Safety (hazards, PPE, handling)\n  * Tools (recommended, compatible)\n  * Resources (docs, links, notes)\n- Preview of material swatch/photo\n- Parameter validation\n- Save/Export options\n\n**Material Selector Widget:**\n- Used in Designer when setting up projects\n- Shows material name, category, key properties\n- Quick access to parameters\n- Material warnings/notes display\n- Link to full material details\n\n**Tool-Material Matrix View:**\n- Grid showing tools vs. materials\n- Color-coded compatibility\n- Click cell to see specific parameters\n- Export matrix for reference\n\nFile Format:\n\n**.gk4materials (Materials Library File):**\n- JSON or TOML format\n- Example:\n```toml\n[material.oak_red]\nname = \"Red Oak\"\ncategory = \"wood_hardwood\"\ndensity = 750.0\nhardness = { janka = 1290 }\nmachinability = 8\n\n[material.oak_red.endmill_flat]\nrpm_range = [16000, 20000]\nfeed_rate_range = [1200, 2000]\nmax_doc = 6.0\nstepover_percent = [40, 60]\n```\n\nImplementation Phases:\n\n**Phase 1: Core Database**\n- Material data structure\n- Basic material library (20-30 common materials)\n- CRUD operations\n- Simple list view\n\n**Phase 2: Properties \u0026 Parameters**\n- Full property definitions\n- Cutting parameter matrices\n- Safety information\n- Material preview\n\n**Phase 3: Integration**\n- Link with CAM Tools Palette\n- Auto-parameter population\n- Compatibility validation\n- Smart suggestions\n\n**Phase 4: Advanced Features**\n- Custom materials\n- Community sharing\n- Cost tracking\n- Inventory management\n\n**Phase 5: Documentation \u0026 Tools**\n- Comprehensive material guides\n- Calculators (feeds, speeds, chip load)\n- Video tutorials\n- Interactive selection wizard\n\nSuccess Criteria:\n- Database includes 100+ materials at launch\n- All common woods, plastics, and aluminum covered\n- Integration with tools palette is seamless\n- Parameters automatically populate from material selection\n- Users can add and share custom materials\n- Material selection improves cutting quality\n\nBenefits:\n- Eliminates guesswork in parameter selection\n- Reduces tool breakage and material waste\n- Improves surface finish quality\n- Faster project setup\n- Knowledge base of proven combinations\n- Educational resource for learning CNC\n\nRelated Issues:\n- gcodekit4-11 (CAM Tools Palette - primary integration)\n- gcodekit4-10 (Designer tool - material selection)\n- gcodekit4-8 (Future phases planning)","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:22:45.835630114+07:00","updated_at":"2025-10-29T16:18:51.90195909+07:00"}
{"id":"gcodekit4-14","title":"Implement GTools panel for common G-code creation and management utilities","description":"Create a GTools panel providing quick access to common G-code creation utilities, management tools, and helper functions for rapid G-code generation without requiring full CAD/CAM design.\n\nVision:\n- Quick G-code generators for common operations\n- Utility tools for G-code manipulation and editing\n- Template-based G-code creation\n- Conversational programming interface\n- Direct-to-machine workflow for simple tasks\n- Educational tool for learning G-code\n\nCore Tool Categories:\n\n1. **Basic Geometry Generators**\n   \n   **Rectangle/Square:**\n   - Width, height, corner radius\n   - Pocket or contour\n   - Depth, passes, stepdown\n   - Lead-in/lead-out\n   - Climb/conventional\n   \n   **Circle/Oval:**\n   - Diameter or radius\n   - Pocket or contour\n   - Center coordinates\n   - Helical entry option\n   - Arc direction (CW/CCW)\n   \n   **Polygon:**\n   - Number of sides (3-12+)\n   - Size (radius or flat-to-flat)\n   - Rotation angle\n   - Pocket or contour\n   \n   **Line/Path:**\n   - Start/end coordinates\n   - Multiple segments\n   - Curved or straight\n   - Depth control\n\n2. **Pattern Generators**\n   \n   **Linear Array:**\n   - Copy object in X/Y\n   - Number of copies\n   - Spacing between copies\n   - Rotation per copy\n   \n   **Circular Array:**\n   - Number of copies around circle\n   - Radius from center\n   - Start/end angle\n   - Rotation option\n   \n   **Grid Array:**\n   - Rows and columns\n   - X and Y spacing\n   - Offset pattern (brick/hex)\n\n3. **Drilling Operations**\n   \n   **Single Hole:**\n   - X, Y coordinates\n   - Depth, retract height\n   - Peck drilling option\n   - Dwell time at bottom\n   \n   **Hole Pattern:**\n   - Linear, circular, or grid\n   - Hole spacing\n   - Bolt circle patterns\n   - Import from CSV/text\n   \n   **Thread Mill:**\n   - Thread specifications\n   - Internal/external\n   - Pitch and depth\n   - Multiple passes\n\n4. **Text \u0026 Engraving**\n   \n   **Text Engraving:**\n   - Text input\n   - Font selection (single-line fonts)\n   - Size and spacing\n   - V-carve or contour\n   - Alignment options\n   \n   **Serial Numbers:**\n   - Pattern generation\n   - Increment/decrement\n   - Position array\n   - Barcode support\n   \n   **Image Engraving:**\n   - Import bitmap\n   - Convert to toolpath\n   - Adjust depth/intensity\n   - Raster or vector\n\n5. **Facing \u0026 Surfacing**\n   \n   **Face Mill:**\n   - Area dimensions\n   - Overlap percentage\n   - Zigzag or spiral\n   - Climb or conventional\n   - Finish pass option\n   \n   **Pocket Clear:**\n   - Outline definition\n   - Island support\n   - Stepover and stepdown\n   - Adaptive clearing\n   - Finish allowance\n   \n   **Profile/Contour:**\n   - Inside/outside/on-line\n   - Corner handling\n   - Multiple passes\n   - Tab support\n\n6. **Utility Tools**\n   \n   **G-code Converter:**\n   - Convert between dialects (GRBL, TinyG, etc.)\n   - Add/remove comments\n   - Optimize moves\n   - Remove redundant commands\n   \n   **Coordinate Transform:**\n   - Translate (shift X/Y/Z)\n   - Rotate around point\n   - Scale up/down\n   - Mirror (flip X/Y)\n   \n   **G-code Splitter:**\n   - Split by line count\n   - Split by tool change\n   - Split by Z-level\n   - Extract sections\n   \n   **G-code Merger:**\n   - Combine multiple files\n   - Reorder operations\n   - Insert breaks/pauses\n   - Add tool changes\n\n7. **Probing \u0026 Setup**\n   \n   **Corner Finder:**\n   - Probe X/Y corner\n   - Set work coordinate\n   - Multiple corner options\n   - Safety checks\n   \n   **Surface Probe:**\n   - Z-height detection\n   - Grid pattern probe\n   - Auto-mesh generation\n   - Thickness measurement\n   \n   **Tool Length Probe:**\n   - Tool setter routine\n   - Reference surface\n   - Offset calculation\n   - Multiple tool measurement\n   \n   **Center Finder:**\n   - Bore/boss centering\n   - Internal/external\n   - Automatic calculation\n\n8. **Motion Control**\n   \n   **Jog Path Creator:**\n   - Define custom jog sequences\n   - Save as macro\n   - Variable speeds\n   - Safety pauses\n   \n   **Warm-up Routine:**\n   - Machine warm-up paths\n   - Spindle speed ramp\n   - All-axis movement\n   - Customizable duration\n   \n   **Test Pattern:**\n   - Surface finish test\n   - Accuracy verification\n   - Calibration patterns\n   - Step gauge generation\n\n9. **Templates \u0026 Macros**\n   \n   **Template Library:**\n   - Common operation templates\n   - Customizable parameters\n   - Save custom templates\n   - Import/export templates\n   - Community template sharing\n   \n   **Macro Manager:**\n   - Quick-access macros\n   - Parameter substitution\n   - Conditional logic\n   - Loop support\n   - Variable management\n   \n   **Snippets:**\n   - G-code snippets library\n   - Start/end code templates\n   - Tool change sequences\n   - Safety routines\n\n10. **Calculators \u0026 Helpers**\n    \n    **Feed \u0026 Speed:**\n    - Calculate optimal RPM\n    - Feed rate calculator\n    - Chip load calculator\n    - Adjustment factors\n    \n    **Time Estimator:**\n    - G-code execution time\n    - Material removal rate\n    - Tool life estimate\n    - Power consumption\n    \n    **Material Calculator:**\n    - Stock size needed\n    - Waste calculation\n    - Cost estimation\n    - Weight calculation\n    \n    **Toolpath Analysis:**\n    - Rapid vs. cutting time\n    - Total distance traveled\n    - Tool engagement stats\n    - Performance metrics\n\nUser Interface:\n\n**GTools Panel Layout:**\n```\n┌─────────────────────────────────────┐\n│  GTools - G-Code Utilities          │\n├─────────────────────────────────────┤\n│  Category Selector [Dropdown]       │\n├─────────────────────────────────────┤\n│  ┌─ Tool List ─┐  ┌─ Parameters ─┐ │\n│  │ • Rectangle │  │               │ │\n│  │ • Circle    │  │  Width: 50mm  │ │\n│  │ • Polygon   │  │  Height: 30mm │ │\n│  │ • Line      │  │  Depth: 5mm   │ │\n│  │ ...         │  │  [Pocket ▼]   │ │\n│  └─────────────┘  │               │ │\n│                   │  [Preview]     │ │\n│                   │               │ │\n│                   │ [Generate]    │ │\n│                   └───────────────┘ │\n├─────────────────────────────────────┤\n│  Output: [Editor] [Visualizer] [Send]│\n└─────────────────────────────────────┘\n```\n\n**Tool Wizard Interface:**\n- Step-by-step parameter entry\n- Visual preview of operation\n- Parameter validation\n- Tool/material selection\n- Generate and preview G-code\n- Send directly to editor or machine\n\n**Quick Access Toolbar:**\n- Favorite tools\n- Recent tools\n- Quick launch buttons\n- Drag-and-drop to editor\n\nFeatures:\n\n**Real-time Preview:**\n- 2D visualization of generated toolpath\n- 3D preview integration\n- Highlight current tool position\n- Show feed vs. rapid moves\n- Display parameters on hover\n\n**Parameter Validation:**\n- Range checking\n- Unit conversion (metric/imperial)\n- Conflict detection\n- Safety checks\n- Warning messages\n\n**G-code Output Options:**\n- Copy to clipboard\n- Send to editor\n- Send directly to machine\n- Save to file\n- Append to existing code\n\n**Integration Points:**\n- Use tools from CAM Tools Palette\n- Select materials from Materials Database\n- Work with Designer tool designs\n- Visualize in G-code Visualizer\n- Execute via Machine Control\n\nData Model:\n\n```rust\nstruct GTool {\n    id: GToolId,\n    name: String,\n    category: GToolCategory,\n    description: String,\n    icon: Image,\n    \n    // Parameter definitions\n    parameters: Vec\u003cParameter\u003e,\n    \n    // Generator function\n    generator: Box\u003cdyn GCodeGenerator\u003e,\n    \n    // Preview function\n    previewer: Option\u003cBox\u003cdyn ToolpathPreviewer\u003e\u003e,\n    \n    // Validation rules\n    validators: Vec\u003cParameterValidator\u003e,\n    \n    // Help/documentation\n    help_text: String,\n    tutorial_url: Option\u003cString\u003e,\n}\n\nstruct Parameter {\n    name: String,\n    param_type: ParameterType,\n    default_value: Value,\n    min: Option\u003cValue\u003e,\n    max: Option\u003cValue\u003e,\n    unit: Unit,\n    required: bool,\n    depends_on: Option\u003cString\u003e,\n}\n\ntrait GCodeGenerator {\n    fn generate(\u0026self, params: \u0026HashMap\u003cString, Value\u003e) -\u003e Result\u003cString\u003e;\n    fn validate(\u0026self, params: \u0026HashMap\u003cString, Value\u003e) -\u003e Result\u003c()\u003e;\n}\n```\n\nImplementation Phases:\n\n**Phase 1: Core Framework**\n- GTools panel UI\n- Parameter system\n- Basic generators (rectangle, circle, line)\n- G-code output handling\n\n**Phase 2: Essential Tools**\n- Pattern generators (arrays)\n- Drilling operations\n- Face/pocket operations\n- Text engraving\n\n**Phase 3: Utility Tools**\n- G-code converter\n- Coordinate transform\n- Splitter/merger\n- Calculators\n\n**Phase 4: Advanced Tools**\n- Probing routines\n- Test patterns\n- Image engraving\n- Thread milling\n\n**Phase 5: Templates \u0026 Integration**\n- Template library\n- Macro manager\n- Full tool palette integration\n- Community templates\n\nExample Use Cases:\n\n**Quick Pocket:**\n1. Select \"Rectangle\" tool\n2. Enter dimensions: 50x30mm, 5mm deep\n3. Choose \"Pocket\" mode\n4. Select tool from palette\n5. Click Generate\n6. Send to machine\n\n**Bolt Circle:**\n1. Select \"Circular Array\" tool\n2. Base pattern: drill hole\n3. Number of holes: 6\n4. Bolt circle diameter: 80mm\n5. Generate and preview\n6. Send to editor\n\n**Face Stock:**\n1. Select \"Face Mill\" tool\n2. Stock size: 200x150mm\n3. Stepover: 75% of tool diameter\n4. Climb milling\n5. Generate and visualize\n6. Execute\n\n**Text Engraving:**\n1. Select \"Text Engraving\" tool\n2. Enter text: \"GCodeKit4\"\n3. Choose single-line font\n4. Size: 10mm height\n5. Select V-bit tool\n6. Generate and preview\n\nSuccess Criteria:\n- Users can generate common operations in \u003c30 seconds\n- No G-code knowledge required for basic operations\n- 20+ tools available at launch\n- All tools have real-time preview\n- Integration with existing tools and databases\n- Community can contribute templates\n\nBenefits:\n- ✅ Rapid G-code creation without CAD/CAM\n- ✅ Lower learning curve for beginners\n- ✅ Quick prototyping and testing\n- ✅ Utility tools for G-code management\n- ✅ Educational tool for learning G-code\n- ✅ Complement to full Designer tool\n\nRelated Issues:\n- gcodekit4-10 (Designer tool - alternative for complex designs)\n- gcodekit4-11 (CAM Tools Palette - tool selection)\n- gcodekit4-13 (Materials Database - material selection)\n- Provides conversational programming interface\n- Bridges gap between manual G-code and full CAD/CAM","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:29:22.260580135+07:00","updated_at":"2025-10-29T16:18:51.908694255+07:00"}
{"id":"gcodekit4-15","title":"Implement Image-to-Laser-GCode converter GTool for laser engraving","description":"Create a GTool for converting multiple image formats (PNG, JPG, BMP, SVG, etc.) into laser-optimized G-code for driving laser engravers and cutters.\n\nVision:\n- Import images in various formats\n- Convert to grayscale or vector paths\n- Generate laser power-modulated G-code\n- Support raster and vector engraving modes\n- Optimize for laser characteristics\n- Preview before engraving\n- Material-aware laser parameters\n\nSupported Image Formats:\n\n**Raster Formats:**\n- PNG (Portable Network Graphics)\n- JPG/JPEG (Joint Photographic Experts Group)\n- BMP (Bitmap)\n- GIF (Graphics Interchange Format)\n- TIFF (Tagged Image File Format)\n- WebP\n\n**Vector Formats:**\n- SVG (Scalable Vector Graphics)\n- DXF (Drawing Exchange Format)\n- AI (Adobe Illustrator - via SVG)\n- PDF (single page, vector only)\n\n**Raw/Advanced:**\n- RAW image formats (CR2, NEF, etc.)\n- Multi-layer TIFF\n- Transparency support (alpha channel)\n\nCore Features:\n\n1. **Image Import \u0026 Processing**\n   \n   **Import Options:**\n   - Drag-and-drop support\n   - File browser selection\n   - Paste from clipboard\n   - Batch import multiple images\n   - Import from URL\n   \n   **Image Preprocessing:**\n   - Resize/scale to fit work area\n   - Rotate and flip\n   - Crop to region of interest\n   - Aspect ratio lock/unlock\n   - DPI/resolution adjustment\n   - Canvas size adjustment\n\n2. **Image Enhancement \u0026 Editing**\n   \n   **Contrast \u0026 Brightness:**\n   - Auto-level adjustment\n   - Manual brightness/contrast\n   - Gamma correction\n   - Histogram equalization\n   \n   **Filters \u0026 Effects:**\n   - Sharpen/blur\n   - Denoise\n   - Edge detection\n   - Emboss effect\n   - Invert colors\n   - Threshold adjustment\n   \n   **Color Conversion:**\n   - RGB to grayscale conversion methods:\n     * Luminance (weighted)\n     * Average\n     * Lightness\n     * Single channel (R/G/B)\n   - Dithering algorithms:\n     * Floyd-Steinberg\n     * Stucki\n     * Atkinson\n     * Ordered (Bayer matrix)\n     * None (threshold)\n\n3. **Engraving Mode Selection**\n   \n   **Raster Engraving:**\n   - Line-by-line scanning\n   - Bidirectional option (faster)\n   - Line interval (resolution)\n   - Scan angle (0°, 45°, 90°, custom)\n   - Overscan distance\n   - Power modulation based on grayscale\n   \n   **Vector Engraving:**\n   - Trace bitmap to vectors\n   - SVG path following\n   - Outline mode\n   - Fill mode with hatching\n   - Contour offset\n   \n   **Hybrid Mode:**\n   - Combine raster and vector\n   - Vector outlines + raster fill\n   - Multi-pass operations\n\n4. **Laser Power Control**\n   \n   **Power Mapping:**\n   - Map grayscale (0-255) to laser power (0-100%)\n   - Linear, exponential, or custom curve\n   - Gamma adjustment for power\n   - Minimum/maximum power limits\n   - Power inversion option\n   \n   **Dynamic Power:**\n   - Speed-compensated power\n   - Corner power reduction\n   - Acceleration compensation\n   - Material-specific curves\n   \n   **Power Modes:**\n   - PWM (Pulse Width Modulation)\n   - Analog voltage control\n   - S-value commands (S0-S1000)\n   - M3/M4/M5 spindle commands\n\n5. **Speed \u0026 Motion Parameters**\n   \n   **Feed Rates:**\n   - Engraving speed (mm/min)\n   - Rapid traverse speed\n   - Different speeds for raster vs. vector\n   - Speed ramping at boundaries\n   \n   **Acceleration:**\n   - Acceleration limits\n   - Jerk control\n   - Corner smoothing\n   - Overscan for acceleration\n   \n   **Path Optimization:**\n   - Minimize non-cutting moves\n   - Optimize scan direction\n   - Group similar operations\n   - Reduce direction changes\n\n6. **Material-Specific Profiles**\n   \n   **Predefined Materials:**\n   - Wood (plywood, MDF, hardwood, veneer)\n   - Acrylic (clear, colored, cast vs extruded)\n   - Leather (natural, synthetic)\n   - Paper/cardboard\n   - Fabric (cotton, polyester)\n   - Cork\n   - Anodized aluminum\n   - Painted metals\n   - Glass (with marking spray)\n   - Stone (marble, granite with marking compound)\n   \n   **Material Parameters:**\n   - Optimal power range\n   - Recommended speed\n   - Number of passes\n   - Focus height\n   - Air assist settings\n   - Warnings and safety notes\n\n7. **Advanced Features**\n   \n   **Multi-Pass Engraving:**\n   - Number of passes\n   - Power progression per pass\n   - Offset between passes\n   - Cross-hatching patterns\n   \n   **Variable Depth:**\n   - Simulate depth with power/speed\n   - 3D relief engraving\n   - Depth map from grayscale\n   \n   **Halftone Patterns:**\n   - Dot matrix halftone\n   - Line halftone\n   - Custom pattern generation\n   - Adjustable frequency and angle\n   \n   **Photo Engraving:**\n   - Optimized for photographs\n   - Contrast enhancement\n   - Detail preservation\n   - Skin tone optimization\n\n8. **G-Code Generation Options**\n   \n   **Output Format:**\n   - GRBL dialect\n   - Marlin/RepRap\n   - Smoothieware\n   - Custom post-processor\n   \n   **G-Code Structure:**\n   - Header/footer customization\n   - Tool change commands\n   - Air assist control (M7/M8/M9)\n   - Focus height commands\n   - Safety interlocks\n   \n   **Optimization:**\n   - Remove redundant commands\n   - Compress linear moves\n   - Optimize power changes\n   - Reduce file size\n\n9. **Preview \u0026 Simulation**\n   \n   **Visual Preview:**\n   - Show resulting engraving\n   - Power levels visualization\n   - Toolpath display\n   - Estimated appearance\n   \n   **Statistics:**\n   - Total engraving time\n   - Total distance traveled\n   - Number of laser on/off cycles\n   - Estimated power consumption\n   - File size\n   \n   **Validation:**\n   - Check work area boundaries\n   - Verify power ranges\n   - Detect potential issues\n   - Safety warnings\n\n10. **Workflow Integration**\n    \n    **GTools Integration:**\n    - Available as GTool in GTools panel\n    - Standard parameter interface\n    - Preview integration\n    - Output to editor or machine\n    \n    **Materials Database:**\n    - Load material-specific settings\n    - Auto-apply optimal parameters\n    - Save new material profiles\n    \n    **Visualizer:**\n    - Display toolpath in 2D visualizer\n    - Show power modulation\n    - Simulate engraving result\n\nUser Interface:\n\n**Image-to-Laser GTool Layout:**\n```\n┌─ Image to Laser G-Code Converter ────────────┐\n│ ┌─ Import ─┐  ┌─ Preview ──────────────────┐ │\n│ │ [Browse] │  │                             │ │\n│ │ [Paste]  │  │  [Image Preview]            │ │\n│ │          │  │                             │ │\n│ └──────────┘  │  Original  →  Processed     │ │\n│               └─────────────────────────────┘ │\n│ ┌─ Image Processing ────────────────────────┐ │\n│ │ Size: [100 x 80] mm    DPI: [300]         │ │\n│ │ Brightness: [---●-----]  Contrast: [--●--]│ │\n│ │ Dithering: [Floyd-Steinberg ▼]            │ │\n│ └────────────────────────────────────────────┘ │\n│ ┌─ Laser Parameters ─────────────────────────┐ │\n│ │ Mode: [● Raster  ○ Vector  ○ Hybrid]      │ │\n│ │ Material: [Wood - Plywood ▼]              │ │\n│ │ Power: 0-80%    Speed: 2000 mm/min        │ │\n│ │ Line Interval: 0.1 mm    Passes: 1        │ │\n│ │ ☑ Bidirectional  ☑ Air Assist             │ │\n│ └────────────────────────────────────────────┘ │\n│ ┌─ Output ───────────────────────────────────┐ │\n│ │ Est. Time: 15:23    File Size: 2.3 MB     │ │\n│ │ [Preview Toolpath]  [Generate G-Code]     │ │\n│ └────────────────────────────────────────────┘ │\n└───────────────────────────────────────────────┘\n```\n\nTechnical Implementation:\n\n**Image Processing Library:**\n- Use `image` crate for raster formats\n- `imageproc` for image processing operations\n- `resvg` for SVG rendering\n- Custom dithering algorithms\n\n**Algorithms:**\n- Edge detection: Canny, Sobel\n- Vectorization: Potrace algorithm\n- Dithering: Floyd-Steinberg, Atkinson, Bayer\n- Halftone: Amplitude-modulated screening\n\n**G-Code Generation:**\n- Raster: Line-by-line with S-value modulation\n- Vector: Continuous path with M3/M4 control\n- Optimization: Path simplification, redundancy removal\n\n**Performance:**\n- Lazy image loading for large files\n- Chunked processing for high-resolution\n- Progress reporting\n- Cancellable operations\n- Multi-threaded processing\n\nData Structures:\n\n```rust\nstruct LaserEngraveParams {\n    // Image\n    source_image: ImageBuffer\u003cLuma\u003cu8\u003e, Vec\u003cu8\u003e\u003e,\n    width_mm: f64,\n    height_mm: f64,\n    dpi: u32,\n    \n    // Processing\n    brightness: f32,\n    contrast: f32,\n    dithering: DitheringMethod,\n    \n    // Laser\n    mode: EngraveMode,\n    power_min: u8,          // 0-100%\n    power_max: u8,\n    speed: f64,             // mm/min\n    line_interval: f64,     // mm\n    \n    // Advanced\n    bidirectional: bool,\n    passes: u32,\n    overscan: f64,          // mm\n    air_assist: bool,\n}\n\nenum EngraveMode {\n    Raster { angle: f64 },\n    Vector { fill_type: VectorFill },\n    Hybrid,\n}\n\nenum DitheringMethod {\n    None { threshold: u8 },\n    FloydSteinberg,\n    Stucki,\n    Atkinson,\n    Bayer { level: u8 },\n}\n```\n\nExample G-Code Output:\n\n```gcode\n; Laser Engraving - Image: photo.jpg\n; Size: 100 x 80 mm, Resolution: 0.1 mm/line\n; Mode: Raster, Material: Plywood\n; Power: 0-80%, Speed: 2000 mm/min\n; Estimated time: 15:23\n\nG21         ; mm mode\nG90         ; absolute positioning\nM3 S0       ; laser off\nG0 Z5       ; safe height\nM8          ; air assist on\n\n; Start position\nG0 X0 Y0 F6000\n\n; Raster lines (simplified example)\nG1 Y0 F2000\nG1 X0 S0\nG1 X0.1 S450  ; Power modulated\nG1 X0.2 S720\nG1 X0.3 S800\n...\nG1 X100 S0\n\n; Next line\nG0 Y0.1\nG1 X100 S0    ; Reverse direction\nG1 X99.9 S780\n...\n\nM5          ; laser off\nM9          ; air assist off\nG0 Z10      ; safe height\nG0 X0 Y0    ; home\nM2          ; program end\n```\n\nSuccess Criteria:\n- Support all common image formats\n- Generate working laser G-code\n- Real-time preview of processing\n- Material-optimized defaults\n- Execution time \u003c30s for typical images\n- File size optimized\n- Professional quality results\n\nBenefits:\n- ✅ Direct image to G-code workflow\n- ✅ No external software needed\n- ✅ Material-aware laser parameters\n- ✅ Optimized for various laser types\n- ✅ Beginner-friendly with presets\n- ✅ Advanced control for experts\n\nRelated Issues:\n- gcodekit4-14 (GTools panel - host tool)\n- gcodekit4-13 (Materials Database - material profiles)\n- gcodekit4-11 (CAM Tools - laser as tool type)\n\nImplementation Priority:\n- Phase 1: Basic raster engraving (PNG, JPG)\n- Phase 2: Image processing \u0026 dithering\n- Phase 3: Vector engraving (SVG)\n- Phase 4: Material profiles \u0026 optimization\n- Phase 5: Advanced features (photo optimization, 3D relief)","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:33:51.574463657+07:00","updated_at":"2025-10-28T23:35:37.167680291+07:00"}
{"id":"gcodekit4-16","title":"Implement Jigsaw Puzzle Pattern Generator GTool for laser cutting","description":"Create a GTool for generating jigsaw puzzle cutting patterns with customizable piece shapes, sizes, and interlocking designs, optimized for laser cutters.\n\nVision:\n- Generate custom jigsaw puzzle patterns\n- Support various piece shapes and styles\n- Configurable piece counts and sizes\n- Interlocking tab/slot designs\n- Optimize for laser cutting (kerf compensation)\n- Support for images or blank puzzles\n- Export cutting toolpaths\n\nCore Features:\n\n1. **Puzzle Configuration**\n   \n   **Basic Settings:**\n   - Puzzle dimensions (width x height)\n   - Number of pieces (or target piece size)\n   - Material thickness\n   - Edge treatment (straight or shaped border)\n   \n   **Layout Options:**\n   - Regular grid pattern\n   - Irregular/random piece sizes\n   - Radial pattern (circular puzzles)\n   - Custom grid divisions\n   \n   **Piece Count Calculation:**\n   - By total count: \"100 pieces\"\n   - By piece size: \"25mm average\"\n   - By grid: \"10 x 10 pieces\"\n   - Auto-calculate optimal layout\n\n2. **Jigsaw Piece Shapes**\n   \n   **Classic Tab-and-Slot:**\n   - Traditional jigsaw interlocking\n   - Male (tab) and female (slot) connectors\n   - Randomized tab placement\n   - Smooth curves for easy assembly\n   \n   **Tab Styles:**\n   - Classic rounded (traditional)\n   - Heart-shaped tabs\n   - Square tabs\n   - Diamond tabs\n   - Puzzle-ball style\n   - Custom Bezier curves\n   \n   **Connector Placement:**\n   - Random (each edge independent)\n   - Symmetric patterns\n   - Alternating sides\n   - Custom rules per edge\n   \n   **Connector Parameters:**\n   - Tab width (% of edge length)\n   - Tab depth (protrusion amount)\n   - Neck width (connection point)\n   - Curve smoothness\n   - Variation randomness\n\n3. **Puzzle Patterns \u0026 Styles**\n   \n   **Standard Grid:**\n   - Regular rectangular pieces\n   - Rows and columns\n   - Uniform piece size\n   - Predictable pattern\n   \n   **Irregular Grid:**\n   - Varied piece sizes\n   - Non-uniform divisions\n   - More challenging assembly\n   - Natural organic look\n   \n   **Whimsy Pieces:**\n   - Special shaped pieces\n   - Custom figures (animals, objects)\n   - Placed among regular pieces\n   - Recognition aids for assembly\n   \n   **Edge Pieces:**\n   - Straight edge on border\n   - Optional decorative border\n   - Corner piece identification\n   - Frame pieces\n\n4. **Laser Cutting Optimization**\n   \n   **Kerf Compensation:**\n   - Account for laser beam width\n   - Offset paths inward/outward\n   - Ensure proper fit after cutting\n   - Material-dependent kerf values\n   \n   **Path Ordering:**\n   - Cut inner pieces first\n   - Minimize material movement\n   - Prevent piece shifting\n   - Efficient cutting sequence\n   \n   **Lead-in/Lead-out:**\n   - Smooth entry and exit points\n   - Minimize burn marks\n   - Corner handling\n   - Loop closure strategy\n   \n   **Power \u0026 Speed:**\n   - Cut through power settings\n   - Optimal cutting speed\n   - Corner slowdown\n   - Multi-pass option for thick materials\n\n5. **Material Handling**\n   \n   **Supported Materials:**\n   - Wood (plywood, MDF, hardboard)\n   - Acrylic (clear, colored)\n   - Cardboard (chipboard, corrugated)\n   - Cork\n   - Leather\n   - Thin metals (with fiber laser)\n   \n   **Material Properties:**\n   - Thickness (affects tab depth)\n   - Kerf width (laser beam width)\n   - Minimum feature size\n   - Recommended power/speed\n   \n   **Holding Strategy:**\n   - Micro-tabs to hold pieces\n   - Onion skin (partial cut)\n   - External frame support\n   - Spacing between pieces\n\n6. **Image Integration**\n   \n   **Image Overlay:**\n   - Import reference image\n   - Scale to puzzle dimensions\n   - Preview cut lines over image\n   - Alignment guides\n   \n   **Dual-Layer Output:**\n   - Layer 1: Engraving (image)\n   - Layer 2: Cutting (puzzle pattern)\n   - Coordinated G-code\n   - Registration marks\n   \n   **Image Placement:**\n   - Center image on puzzle\n   - Crop to fit\n   - Maintain aspect ratio\n   - Border considerations\n\n7. **Advanced Features**\n   \n   **Nesting \u0026 Packing:**\n   - Efficient material usage\n   - Multiple puzzles per sheet\n   - Minimize waste\n   - Spacing for heat dissipation\n   \n   **Double-Sided Puzzles:**\n   - Different images on each side\n   - Alignment registration\n   - Sequential cutting instructions\n   \n   **Interlocking Layers:**\n   - 3D puzzle capability\n   - Multiple layer puzzles\n   - Stacking interlocks\n   - Assembly guides\n   \n   **Accessibility Options:**\n   - Larger pieces for children/elderly\n   - Tactile features for vision impaired\n   - Color-coded edge markers\n   - Piece numbering\n\n8. **Templates \u0026 Presets**\n   \n   **Standard Sizes:**\n   - 50 pieces (beginner)\n   - 100 pieces (easy)\n   - 500 pieces (medium)\n   - 1000 pieces (hard)\n   - Custom piece counts\n   \n   **Preset Patterns:**\n   - Classic rectangular\n   - Hexagonal grid\n   - Circular/radial\n   - Irregular organic\n   - Themed patterns\n   \n   **Material Presets:**\n   - 3mm plywood\n   - 6mm MDF\n   - 3mm acrylic\n   - 2mm cardboard\n   - Custom materials\n\n9. **Export \u0026 Output**\n   \n   **G-code Generation:**\n   - Optimized cutting paths\n   - Layer separation (engrave/cut)\n   - Tool change commands\n   - Air assist control\n   - Focus height adjustment\n   \n   **File Formats:**\n   - G-code (.gcode, .nc)\n   - SVG (for reference)\n   - DXF (for CAD import)\n   - PDF (for documentation)\n   \n   **Metadata:**\n   - Piece count\n   - Cut time estimate\n   - Material requirements\n   - Assembly instructions\n   - Piece identification map\n\n10. **Preview \u0026 Validation**\n    \n    **Visual Preview:**\n    - Show all pieces\n    - Color-code piece types (edge, corner, interior)\n    - Display image overlay\n    - Zoom and pan\n    \n    **Cutting Simulation:**\n    - Animate cutting sequence\n    - Show laser path\n    - Highlight current piece\n    - Time progress indicator\n    \n    **Validation Checks:**\n    - Piece connectivity (all pieces connect)\n    - No isolated pieces\n    - Minimum feature size check\n    - Kerf compensation verification\n    - Material boundary check\n\nUser Interface:\n\n**Jigsaw Puzzle GTool Layout:**\n```\n┌─ Jigsaw Puzzle Pattern Generator ─────────────┐\n│ ┌─ Puzzle Setup ──────────────────────────────┐│\n│ │ Dimensions: [200] x [150] mm                ││\n│ │ Pieces: [● By Count: 100 ○ By Size: 25mm]  ││\n│ │ Material: [3mm Plywood ▼]  Kerf: [0.15mm]  ││\n│ │ Border: [☑ Straight edges on perimeter]    ││\n│ └─────────────────────────────────────────────┘│\n│ ┌─ Piece Design ──────────────────────────────┐│\n│ │ Pattern: [Regular Grid ▼]                   ││\n│ │ Tab Style: [Classic Rounded ▼]              ││\n│ │ Tab Size: [-----●----] 40%                  ││\n│ │ Randomness: [---●------] 30%                ││\n│ │ ☑ Generate whimsy pieces (5%)              ││\n│ └─────────────────────────────────────────────┘│\n│ ┌─ Image (Optional) ──────────────────────────┐│\n│ │ [Browse Image...]  or  [Skip - Blank Puzzle]││\n│ │ [ Preview with cut lines ]                  ││\n│ └─────────────────────────────────────────────┘│\n│ ┌─ Cutting Parameters ────────────────────────┐│\n│ │ Power: 80%   Speed: 10 mm/s   Passes: 1    ││\n│ │ ☑ Lead-in/out  ☑ Corner slowdown           ││\n│ │ Cut Order: [Inner pieces first ▼]          ││\n│ └─────────────────────────────────────────────┘│\n│ ┌─ Preview \u0026 Generate ────────────────────────┐│\n│ │ [Preview Pattern]  [Preview with Image]     ││\n│ │ Est. Time: 25:30   Pieces: 100              ││\n│ │ [Generate G-Code]  [Export SVG/DXF]        ││\n│ └─────────────────────────────────────────────┘│\n└───────────────────────────────────────────────┘\n```\n\nTechnical Implementation:\n\n**Pattern Generation:**\n- Voronoi diagram for irregular patterns\n- Delaunay triangulation for meshing\n- Bezier curves for smooth tabs\n- Randomization with seed control\n\n**Interlocking Algorithm:**\n- Graph-based connectivity\n- Tab/slot pairing rules\n- Collision detection\n- Assembly validation\n\n**Path Optimization:**\n- Traveling salesman for cut order\n- Kerf offset calculations\n- Lead-in/out path generation\n- Corner detection and handling\n\n**Libraries:**\n- `geo` for computational geometry\n- `lyon` for path tessellation\n- `voronator` for Voronoi diagrams\n- Custom Bezier curve generation\n\nData Structures:\n\n```rust\nstruct JigsawPuzzle {\n    dimensions: (f64, f64),      // width, height in mm\n    piece_count: u32,\n    material: Material,\n    kerf: f64,                   // mm\n    \n    // Pattern\n    pattern_type: PatternType,\n    tab_style: TabStyle,\n    tab_size_percent: f64,       // 20-50%\n    randomness: f64,             // 0-100%\n    \n    // Pieces\n    pieces: Vec\u003cPuzzlePiece\u003e,\n    whimsy_pieces: Vec\u003cWhimsyPiece\u003e,\n    \n    // Cutting\n    cut_power: u8,               // 0-100%\n    cut_speed: f64,              // mm/s\n    passes: u32,\n    \n    // Image\n    image: Option\u003cImageData\u003e,\n}\n\nstruct PuzzlePiece {\n    id: usize,\n    edges: [Edge; 4],            // top, right, bottom, left\n    is_border: bool,\n    corner: Option\u003cCorner\u003e,\n    whimsy: bool,\n    path: Vec\u003cPoint2D\u003e,          // cutting path\n}\n\nstruct Edge {\n    connector: ConnectorType,     // Tab, Slot, or Straight\n    curve: BezierCurve,\n}\n\nenum ConnectorType {\n    Tab { depth: f64, width: f64 },\n    Slot { depth: f64, width: f64 },\n    Straight,\n}\n\nenum PatternType {\n    RegularGrid,\n    IrregularGrid { variation: f64 },\n    Radial { sectors: u32 },\n    Voronoi,\n}\n```\n\nExample G-Code Output:\n\n```gcode\n; Jigsaw Puzzle - 100 pieces\n; Dimensions: 200 x 150 mm\n; Material: 3mm Plywood, Kerf: 0.15mm\n; Estimated time: 25:30\n\nG21         ; mm mode\nG90         ; absolute positioning\nM3 S0       ; laser off\nG0 Z5       ; safe height\nM8          ; air assist on\n\n; Piece 1 (interior)\nG0 X50.5 Y75.2 F6000    ; position\nG1 X50.5 Y75.2 S800     ; lead-in\n; Top edge with tab\nG1 X51.2 Y75.8 S800\nG1 X52.5 Y76.2 S800     ; tab curve\nG1 X53.8 Y75.8 S800\nG1 X54.5 Y75.2 S800\n; Right edge with slot\nG1 X54.5 Y74.5 S800\nG1 X55.1 Y73.8 S800     ; slot curve\n...\n\n; Continue for all pieces\n\nM5          ; laser off\nM9          ; air assist off\nG0 Z10      ; safe height\nM2          ; program end\n```\n\nSuccess Criteria:\n- Generate functional jigsaw puzzles\n- Pieces interlock properly after cutting\n- Kerf compensation works accurately\n- Clean cuts without burning\n- Pieces stay in place during cutting\n- Assembly possible without force\n- Professional quality results\n\nBenefits:\n- ✅ Create custom jigsaw puzzles from any image\n- ✅ Educational tool for children\n- ✅ Personalized gifts and products\n- ✅ Therapeutic/accessibility applications\n- ✅ Commercial puzzle production\n- ✅ No external puzzle software needed\n\nRelated Issues:\n- gcodekit4-14 (GTools panel - host tool)\n- gcodekit4-15 (Image-to-Laser - image engraving layer)\n- gcodekit4-13 (Materials Database - material settings)\n- gcodekit4-11 (CAM Tools - laser as tool)\n\nImplementation Priority:\n- Phase 1: Basic grid pattern with classic tabs\n- Phase 2: Kerf compensation and optimization\n- Phase 3: Irregular patterns and variations\n- Phase 4: Image integration (dual-layer)\n- Phase 5: Advanced features (whimsy, 3D, templates)\n\nUse Cases:\n- Custom photo puzzles\n- Educational puzzles for schools\n- Therapeutic puzzles for seniors\n- Marketing/promotional puzzles\n- Wooden toy puzzles for children\n- Art pieces and decorative puzzles","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:37:50.294700903+07:00","updated_at":"2025-10-28T23:39:25.516740748+07:00"}
{"id":"gcodekit4-17","title":"Implement Tabbed Box Generator GTool for laser-cut snap-together designs","description":"Create a GTool for generating parametric tabbed box designs with finger joints, snap-fit connections, optional lids, and internal partitions, optimized for laser cutting and tool-free assembly.\n\nVision:\n- Generate custom box designs from dimensions\n- Parametric finger joint calculations\n- Snap-together assembly without glue\n- Optional lids (hinged, sliding, lift-off)\n- Internal dividers and compartments\n- Engraving and decorative cutouts\n- Optimize for laser cutting and nesting\n\nCore Features:\n\n1. **Box Configuration**\n   \n   **Basic Dimensions:**\n   - Length (X), Width (Y), Height (Z)\n   - Internal vs. external dimensions\n   - Material thickness\n   - Corner style (butt joint, miter, finger)\n   \n   **Box Styles:**\n   - Standard rectangular box (6 sides)\n   - Open-top box (5 sides)\n   - Tray with low sides\n   - Display box with front opening\n   - Custom side configurations\n   \n   **Construction Method:**\n   - Finger joints (traditional)\n   - T-slot joints\n   - Living hinges\n   - Snap-fit tabs\n   - Captive nuts (for assembly hardware)\n\n2. **Finger Joint Design**\n   \n   **Joint Parameters:**\n   - Tooth width (tab size)\n   - Number of teeth per edge\n   - First/last tooth position\n   - Tooth depth equals material thickness\n   \n   **Joint Styles:**\n   - Equal width teeth\n   - Variable width (3:5 ratio common)\n   - Half-tooth at edges\n   - Full-tooth at edges\n   - Asymmetric patterns\n   \n   **Joint Calculation:**\n   - Auto-calculate optimal tooth count\n   - Based on edge length\n   - Minimum tooth width (3-5mm typical)\n   - Maximum tooth width for strength\n   - Kerf compensation for fit\n   \n   **Fit Adjustment:**\n   - Tight fit (press-fit)\n   - Normal fit (hand assembly)\n   - Loose fit (easy assembly)\n   - Custom offset (±0.1mm increments)\n\n3. **Lid Options**\n   \n   **Lift-Off Lid:**\n   - Friction fit\n   - Lip/rabbet joint\n   - Tolerance control\n   - Handle cutouts\n   - Clearance adjustment\n   \n   **Hinged Lid:**\n   - Living hinge (flexure)\n   - Separate hinge elements\n   - Hinge position (back, side, front)\n   - Opening angle limits\n   - Latch/closure mechanism\n   \n   **Sliding Lid:**\n   - Groove depth and width\n   - Slide direction\n   - Stop features\n   - Handle options\n   - Multiple sliding panels\n   \n   **Swing Lid:**\n   - Pin hinge\n   - Integrated or separate pins\n   - Swing direction\n   - Latch mechanism\n\n4. **Internal Partitions**\n   \n   **Divider Types:**\n   - Vertical dividers (height partitions)\n   - Horizontal shelves\n   - Cross-hatch grid patterns\n   - Honeycomb structures\n   - Custom shaped compartments\n   \n   **Attachment Methods:**\n   - Slot-and-tab joints\n   - Friction fit grooves\n   - Keyed interlocks\n   - Snap-fit clips\n   - Glued (optional)\n   \n   **Partition Layout:**\n   - Equal divisions\n   - Custom spacing\n   - Adjustable/removable dividers\n   - Multi-level organization\n   - Access cutouts/handles\n\n5. **Decorative Features**\n   \n   **Cutouts \u0026 Windows:**\n   - Rectangular windows\n   - Circular ports\n   - Custom shapes\n   - Finger pulls/handles\n   - Ventilation patterns\n   \n   **Engraving:**\n   - Labels and text\n   - Decorative patterns\n   - Logos and graphics\n   - Assembly marks\n   - Material grain indicators\n   \n   **Edge Treatments:**\n   - Chamfers\n   - Rounded corners\n   - Decorative profiles\n   - Scalloped edges\n   - Living hinge patterns\n\n6. **Material \u0026 Joinery Optimization**\n   \n   **Material Selection:**\n   - Plywood (3mm, 4mm, 6mm)\n   - MDF (3mm, 6mm, 9mm)\n   - Acrylic (3mm, 5mm, 6mm)\n   - Hardboard (3mm)\n   - Cardboard (1-3mm)\n   - Basswood/balsa (thin sheets)\n   \n   **Kerf Compensation:**\n   - Account for laser beam width\n   - Inside/outside offset\n   - Tab fit adjustment\n   - Per-material kerf values\n   - Test joint generator\n   \n   **Strength Considerations:**\n   - Minimum tab width\n   - Corner reinforcement\n   - Grain direction (wood)\n   - Stress concentration avoidance\n   - Assembly sequence planning\n\n7. **Advanced Box Types**\n   \n   **Hinged Boxes:**\n   - Book-style opening\n   - Living hinge on one edge\n   - Clasp/latch on opposite edge\n   - Integrated stops\n   \n   **Stackable Boxes:**\n   - Alignment features\n   - Interlocking corners\n   - Stacking lips/grooves\n   - Weight distribution\n   \n   **Nested Boxes:**\n   - Set of fitting boxes\n   - Graduated sizes\n   - Russian doll style\n   - Storage organization\n   \n   **Specialty Boxes:**\n   - Hexagonal/octagonal\n   - Cylindrical (staved)\n   - Tapered sides\n   - Curved panels (scored)\n   - Multi-angle joints\n\n8. **Assembly Features**\n   \n   **Assembly Aids:**\n   - Alignment pins/holes\n   - Assembly order labels\n   - Keying (prevent wrong assembly)\n   - Registration marks\n   - Visual guides\n   \n   **Disassembly:**\n   - Removable panels\n   - Tool-free disassembly\n   - Sliding/latching joints\n   - Reversible assembly\n   \n   **Hardware Integration:**\n   - Screw holes\n   - Captive nut slots\n   - Magnet pockets\n   - Hinge mounting points\n   - Lock mechanism cutouts\n\n9. **Nesting \u0026 Layout**\n   \n   **Sheet Layout:**\n   - Automatic part nesting\n   - Minimize material waste\n   - Grain direction consideration\n   - Cutting path optimization\n   - Multiple boxes per sheet\n   \n   **Labeling:**\n   - Part identification\n   - Panel naming (Front, Back, etc.)\n   - Assembly sequence numbers\n   - Inside/outside indicators\n   - Grain direction arrows\n   \n   **Test Cuts:**\n   - Joint test pieces\n   - Fit verification samples\n   - Corner test assembly\n   - Small-scale prototype\n\n10. **Export \u0026 Documentation**\n    \n    **G-Code Output:**\n    - Optimized cutting paths\n    - Layer organization\n    - Engraving before cutting\n    - Tab order for stability\n    - Part separation\n    \n    **File Formats:**\n    - G-code (.gcode, .nc)\n    - SVG (for reference/editing)\n    - DXF (for CAD import)\n    - PDF (assembly instructions)\n    - 3D model (preview only)\n    \n    **Assembly Instructions:**\n    - Exploded view diagram\n    - Step-by-step assembly\n    - Part identification\n    - Tool/glue requirements\n    - Troubleshooting guide\n\nUser Interface:\n\n**Tabbed Box Generator Layout:**\n```\n┌─ Tabbed Box Generator ────────────────────────┐\n│ ┌─ Box Dimensions ──────────────────────────┐ │\n│ │ [● Internal  ○ External] Dimensions       │ │\n│ │ Length:  [100] mm                         │ │\n│ │ Width:   [80]  mm                         │ │\n│ │ Height:  [60]  mm                         │ │\n│ │ Material Thickness: [3] mm                │ │\n│ └───────────────────────────────────────────┘ │\n│ ┌─ Joint Configuration ─────────────────────┐ │\n│ │ Joint Type: [Finger Joints ▼]            │ │\n│ │ Tooth Width: [● Auto  ○ Manual: 5mm]     │ │\n│ │ Fit: [● Normal  ○ Tight  ○ Loose]        │ │\n│ │ Kerf Comp: [0.15] mm                      │ │\n│ └───────────────────────────────────────────┘ │\n│ ┌─ Box Features ────────────────────────────┐ │\n│ │ Style: [Standard Box ▼]                   │ │\n│ │ ☑ Lid [Lift-off ▼]  ☑ Internal Dividers │ │\n│ │ Dividers: Vertical: [2] Horizontal: [1]  │ │\n│ │ ☑ Finger pulls  ☑ Engraved labels        │ │\n│ └───────────────────────────────────────────┘ │\n│ ┌─ Material \u0026 Cutting ──────────────────────┐ │\n│ │ Material: [3mm Plywood ▼]                 │ │\n│ │ Power: 80%   Speed: 10 mm/s   Passes: 1  │ │\n│ └───────────────────────────────────────────┘ │\n│ ┌─ Preview \u0026 Generate ──────────────────────┐ │\n│ │ [3D Preview]  [Flat Layout]  [Test Joint]│ │\n│ │ Parts: 8    Sheet: 200x150mm  Waste: 12% │ │\n│ │ [Generate G-Code]  [Export DXF/SVG]      │ │\n│ └───────────────────────────────────────────┘ │\n└───────────────────────────────────────────────┘\n```\n\nTechnical Implementation:\n\n**Parametric Design:**\n- Calculate all dimensions from parameters\n- Constraint-based joint placement\n- Automatic tab/slot generation\n- Geometry validation\n\n**Joint Generation:**\n- Finger joint tooth distribution\n- Tab projection calculation\n- Slot depth and positioning\n- Kerf offset application\n\n**Panel Layout:**\n- Unfold 3D box to 2D panels\n- Orient for grain direction\n- Apply joint features to edges\n- Add decorative elements\n\n**Nesting Algorithm:**\n- Bin packing for efficient layout\n- Rotate panels for best fit\n- Maintain spacing for heat dissipation\n- Minimize cut path length\n\n**Libraries:**\n- `geo` for computational geometry\n- `lyon` for path generation\n- Custom parametric box algorithms\n- Nesting/packing algorithms\n\nData Structures:\n\n```rust\nstruct TabbedBox {\n    // Dimensions\n    length: f64,\n    width: f64,\n    height: f64,\n    material_thickness: f64,\n    internal_dimensions: bool,\n    \n    // Joint configuration\n    joint_type: JointType,\n    tooth_width: ToothWidth,\n    fit_adjustment: f64,\n    kerf: f64,\n    \n    // Features\n    lid_type: Option\u003cLidType\u003e,\n    dividers: DividerConfig,\n    decorations: Vec\u003cDecoration\u003e,\n    \n    // Panels\n    panels: Vec\u003cPanel\u003e,\n    \n    // Cutting parameters\n    material: Material,\n    cut_params: CuttingParams,\n}\n\nstruct Panel {\n    name: String,              // \"Front\", \"Back\", etc.\n    width: f64,\n    height: f64,\n    edges: [Edge; 4],          // Top, Right, Bottom, Left\n    cutouts: Vec\u003cCutout\u003e,\n    engravings: Vec\u003cEngraving\u003e,\n}\n\nstruct Edge {\n    length: f64,\n    joint: JointFeature,\n}\n\nenum JointFeature {\n    FingerJoints {\n        teeth: Vec\u003cTooth\u003e,\n        first_tooth_is_tab: bool,\n    },\n    TSlot {\n        slots: Vec\u003cSlot\u003e,\n    },\n    Plain,\n}\n\nenum LidType {\n    LiftOff { lip_depth: f64 },\n    Hinged { hinge_side: Side },\n    Sliding { groove_depth: f64 },\n}\n\nstruct DividerConfig {\n    vertical_count: u32,\n    horizontal_count: u32,\n    custom_layout: Option\u003cVec\u003cDivider\u003e\u003e,\n}\n```\n\nExample G-Code Output:\n\n```gcode\n; Tabbed Box - 100x80x60mm\n; Material: 3mm Plywood\n; Parts: 6 panels + 3 dividers\n; Kerf compensation: 0.15mm\n\nG21         ; mm mode\nG90         ; absolute positioning\nM3 S0       ; laser off\n\n; Part 1: Front panel (100 x 60 mm)\n; Finger joints on top, bottom, left, right\nG0 X10 Y10 F6000\n\n; Bottom edge - finger joints\nG1 X10 Y10 S800\n; First tab (female/slot)\nG1 X15 Y10 S800\nG1 X15 Y13 S800    ; slot depth\nG1 X20 Y13 S800\nG1 X20 Y10 S800\n; Second tab (male/tooth)\nG1 X25 Y10 S800\n; Continue pattern...\nG1 X110 Y10 S800\n\n; Right edge - finger joints\nG1 X110 Y15 S800\nG1 X113 Y15 S800   ; tooth protrusion\nG1 X113 Y20 S800\nG1 X110 Y20 S800\n; Continue up right edge...\n\n; Assembly marks (engrave)\nM3 S200            ; Low power engrave\nG0 X50 Y30 F6000\n; Engrave \"FRONT\" label\n...\n\n; Continue for all panels and dividers\n\nM5          ; laser off\nG0 Z10\nM2          ; program end\n```\n\nSuccess Criteria:\n- Generate accurate box designs\n- Finger joints fit properly (hand assembly)\n- Kerf compensation correct\n- Panels assemble square\n- Lid fits securely\n- Dividers insert properly\n- Clean cuts without charring\n- Assembly without glue works\n\nBenefits:\n- ✅ Custom storage solutions\n- ✅ Tool-free assembly\n- ✅ Reusable/disassemble-able\n- ✅ Professional product packaging\n- ✅ Prototyping and small production\n- ✅ Educational kits\n- ✅ No woodworking skills needed\n\nRelated Issues:\n- gcodekit4-14 (GTools panel - host tool)\n- gcodekit4-13 (Materials Database - material settings)\n- gcodekit4-11 (CAM Tools - tool selection)\n\nImplementation Priority:\n- Phase 1: Basic rectangular box with finger joints\n- Phase 2: Kerf compensation and fit adjustment\n- Phase 3: Lid options (lift-off, hinged)\n- Phase 4: Internal dividers and partitions\n- Phase 5: Advanced features (decorations, nesting, complex boxes)\n\nUse Cases:\n- Storage boxes and organizers\n- Gift boxes and packaging\n- Electronics enclosures\n- Tool boxes and cases\n- Display boxes\n- Modular storage systems\n- Educational STEM kits\n- Product prototyping\n- Small business packaging","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T23:42:36.431162786+07:00","updated_at":"2025-10-28T23:44:19.205771689+07:00"}
{"id":"gcodekit4-18","title":"System not tracking device status and position in real-time","description":"","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-29T00:35:04.049415683+07:00","updated_at":"2025-10-29T00:35:04.049415683+07:00"}
{"id":"gcodekit4-19","title":"System not tracking connected device firmware version","description":"","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-29T00:37:11.030289579+07:00","updated_at":"2025-10-29T00:37:11.030289579+07:00"}
{"id":"gcodekit4-2","title":"Reorganize visualizer controls into single toolbar row with pan buttons on right","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T14:56:57.51401382+07:00","updated_at":"2025-10-28T16:09:54.247582625+07:00","closed_at":"2025-10-28T16:09:54.247582625+07:00"}
{"id":"gcodekit4-20","title":"Create firmware capabilities database to track features by version","description":"","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T00:40:36.069792803+07:00","updated_at":"2025-10-29T00:40:36.069792803+07:00"}
{"id":"gcodekit4-21","title":"Create Device database to store device type, capabilities, firmware and version","description":"","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-29T00:46:06.403865248+07:00","updated_at":"2025-10-29T00:46:06.403865248+07:00"}
{"id":"gcodekit4-22","title":"Implement Designer tool for creating CNC designs and generating G-code","description":"Create an integrated CAD/CAM Designer tool that allows users to design CNC projects visually and generate G-code directly within GCodeKit4.\n\n**Phase 1 MVP Scope:**\n- Canvas with zoom/pan\n- Basic shapes (rectangle, circle, line)\n- Object selection and manipulation\n- Simple contour toolpath generation\n- G-code export to G-Code Editor (for sending to device or saving from there)\n\nVision:\n- Visual design tool for creating 2D/2.5D CNC projects\n- Intuitive drawing and editing interface\n- Parametric design capabilities\n- Direct G-code generation from designs\n- Library of common shapes and operations\n\nCore Features (Future Phases):\n\n1. **Drawing Tools**\n   - Basic shapes: Rectangle, Circle, Ellipse, Polygon\n   - Line and arc drawing (straight, arc, bezier)\n   - Text tool with multiple fonts (engrave or pocket)\n   - Boolean operations (union, subtract, intersect)\n   - Path editing and manipulation\n   - Snap-to-grid and object snapping\n   - Measurement and dimensioning tools\n\n2. **Design Operations**\n   - Offset paths (inward/outward)\n   - Array operations (linear, circular, grid)\n   - Mirror and rotate\n   - Scale and transform\n   - Chamfer and fillet\n   - Path smoothing and optimization\n   - Layer management\n\n3. **Toolpath Generation**\n   - Contour/profile operations\n   - Pocket operations (with island support)\n   - Drilling operations\n   - Engraving operations\n   - V-carving support\n   - Adaptive clearing\n   - Multiple pass depth control\n   - Stepover and stepdown settings\n\n4. **Tool Library**\n   - Define tool geometry (diameter, type, flutes)\n   - Cutting parameters (feed rate, plunge rate, RPM)\n   - Tool change management\n   - Tool path simulation\n   - Tool wear compensation\n   - Material-specific settings\n\n5. **Work Setup**\n   - Material dimensions and origin\n   - Fixture/holding setup\n   - Multiple work coordinate systems (G54-G59)\n   - Safe Z height configuration\n   - Rapid positioning settings\n   - Collision detection zones\n\n6. **G-Code Generation**\n   - Post-processor selection (GRBL, TinyG, etc.)\n   - Custom post-processor scripting\n   - G-code preview and verification\n   - Toolpath optimization\n   - Estimate machining time\n   - Generate setup sheets\n\n7. **File Management**\n   - Save/load design projects (.gk4design format)\n   - Import DXF, SVG, and other vector formats\n   - Export G-code with multiple post-processors\n   - Export toolpath visualization\n   - Template library for common projects\n\n8. **User Interface**\n   - Canvas with zoom, pan, rotate\n   - Property panel for selected objects\n   - Layers panel for organization\n   - Operations tree view\n   - Real-time preview with shading\n   - Units support (metric/imperial)\n\nPhased Implementation:\n\n**Phase 1: Basic Drawing (MVP)**\n- Canvas with zoom/pan\n- Basic shapes (rectangle, circle, line)\n- Object selection and manipulation\n- Simple contour toolpath generation\n- G-code export to G-Code Editor\n\n**Phase 2: Advanced Drawing**\n- Bezier curves and splines\n- Text support\n- Boolean operations\n- Path editing tools\n- Layer management\n\n**Phase 3: CAM Operations**\n- Pocket operations\n- Drilling patterns\n- Tool library\n- Multiple pass support\n- Toolpath simulation\n\n**Phase 4: Advanced Features**\n- Import DXF/SVG\n- Parametric designs\n- Array operations\n- V-carving\n- Adaptive clearing\n\n**Phase 5: Polish \\u0026 Integration**\n- Template library\n- Custom post-processors\n- Design validation\n- Integration with visualizer\n- Performance optimization\n\nSuccess Criteria:\n- Users can create basic 2D designs without external tools\n- Generate working G-code for common operations\n- Intuitive UI that doesn't require CAM expertise\n- Performance: Handle designs with 1000+ objects smoothly\n- Integration: Seamlessly move from design to machining","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:18:51.859296437+07:00","updated_at":"2025-10-29T16:18:51.859296437+07:00","closed_at":"2025-10-29T16:13:15.661255489+07:00"}
{"id":"gcodekit4-23","title":"Implement Designer UI Panel (Phase 2)","description":"","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:20:43.792472948+07:00","updated_at":"2025-10-29T16:20:43.792472948+07:00","dependencies":[{"issue_id":"gcodekit4-23","depends_on_id":"gcodekit4-10","type":"discovered-from","created_at":"2025-10-29T16:20:43.817798827+07:00","created_by":"daemon"}]}
{"id":"gcodekit4-24","title":"Implement Designer UI Panel (Phase 2)","description":"","notes":"Phase 2 BACKEND COMPLETE - UI Panel (Slint) + State Manager fully implemented. 28 tests passing. Ready for main.rs callback wiring (5-7 hours to full MVP). Commits: 81dff98, c179e71, 3b01415","status":"in_progress","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:20:48.460280104+07:00","updated_at":"2025-10-29T16:39:30.774565188+07:00"}
{"id":"gcodekit4-3","title":"Review and improve visualizer world coordinates and fit-to-window function","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-28T16:10:12.206718734+07:00","updated_at":"2025-10-28T16:10:12.206718734+07:00"}
{"id":"gcodekit4-4","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"Move all remaining inline #[cfg(test)] tests from source files to the tests/ directory, organized by module hierarchy.\n\nScope:\n- Identify all modules with inline tests in src/\n- Create corresponding test files in tests/ organized by module structure\n- Convert inline unit tests to integration tests testing public API\n- Remove #[cfg(test)] blocks from source files\n- Ensure all tests focus on public API, not internal implementation\n- Follow AGENTS.md guidelines for test organization\n\nBenefits:\n- Consistent test organization across entire codebase\n- Better separation of test code from implementation\n- Tests verify public contracts, not implementation details\n- Easier to find and maintain tests\n- Follows Rust best practices and AGENTS.md standards\n\nReference: Visualizer module migration completed in gcodekit4-1 (28 → 102 tests)","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:25.663259692+07:00","updated_at":"2025-10-29T00:29:39.205099666+07:00","closed_at":"2025-10-29T00:29:39.205099666+07:00"}
{"id":"gcodekit4-5","title":"Migrate all remaining inline tests to tests/ folder organized by module","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:20:42.276578747+07:00","updated_at":"2025-10-28T16:21:17.711282027+07:00","closed_at":"2025-10-28T16:21:17.711282027+07:00"}
{"id":"gcodekit4-6","title":"Increase test coverage to at least 600 comprehensive tests","description":"Expand test coverage from current ~530 tests to at least 600 comprehensive tests across all modules.\n\nCurrent Status:\n- Total tests: ~530\n- Visualizer: 102 integration tests (recently migrated)\n- Phase 7: 40 tests\n- Phase 6/7 UI: 27 tests\n- Other modules: ~361 tests\n\nTarget Coverage Areas:\n1. Communication Module\n   - Serial/TCP/WebSocket connection tests\n   - Message parsing and protocol tests\n   - Error handling and reconnection logic\n   - Flow control and buffer management\n\n2. G-Code Parser \u0026 Preprocessors\n   - All 14 preprocessor tests\n   - Edge cases and error conditions\n   - Arc expansion and coordinate transformations\n   - Mesh leveling and calibration\n\n3. Firmware Controllers\n   - GRBL, TinyG, g2core, FluidNC, Smoothieware\n   - Command parsing and response handling\n   - State machine transitions\n   - Override and real-time commands\n\n4. Core Module\n   - Event system tests\n   - State management\n   - Message handling\n   - Controller lifecycle\n\n5. UI Module\n   - Component behavior tests\n   - State synchronization\n   - User interaction flows\n   - Error handling and validation\n\n6. Utilities\n   - File I/O operations\n   - Data processing\n   - Export functionality\n   - Configuration management\n\nGoals:\n- 600+ total tests (70 new tests minimum)\n- All tests in tests/ folder (no inline tests)\n- Focus on integration tests testing public API\n- Comprehensive edge case coverage\n- Error condition testing\n- Realistic usage scenarios\n\nBenefits:\n- Higher confidence in code correctness\n- Better regression detection\n- Improved maintainability\n- Documentation through tests\n- Production-ready quality assurance","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:16.585029885+07:00","updated_at":"2025-10-29T00:33:37.574800547+07:00","closed_at":"2025-10-29T00:33:37.574800547+07:00"}
{"id":"gcodekit4-7","title":"Increase test coverage to at least 600 comprehensive tests","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T16:22:52.318210331+07:00","updated_at":"2025-10-28T16:23:40.454446454+07:00","closed_at":"2025-10-28T16:23:40.454446454+07:00"}
{"id":"gcodekit4-8","title":"Identify and plan additional development phases beyond Phase 7","description":"Plan and document future development phases (Phase 8+) to continue improving GCodeKit4 after completion of Phase 7 (Tasks 1-150).\n\nCurrent Status:\n- Phase 1-7: COMPLETE (150/150 tasks, 100%)\n- All core features implemented\n- 2D G-Code visualizer complete with interactive controls\n- ~530 tests, all passing\n\nPotential Phase 8+ Areas:\n\n1. **3D Visualization Enhancement**\n   - Full 3D toolpath rendering with OpenGL/WebGPU\n   - Multiple camera angles and projection modes\n   - Real-time tool animation during execution\n   - Material removal simulation\n   - Collision detection visualization\n\n2. **Advanced Machine Features**\n   - Tool library management\n   - Automatic tool change sequences\n   - Work offset management (G54-G59.3)\n   - Fixture and vise setup visualization\n   - Multi-axis support (4th/5th axis)\n\n3. **CAM Integration**\n   - Basic CAM operations (pocket, contour, drill)\n   - Import from popular CAM formats\n   - Post-processor system\n   - Toolpath optimization\n   - Feeds and speeds calculator\n\n4. **Network \u0026 Cloud Features**\n   - Remote machine monitoring\n   - Cloud storage for G-code files\n   - Machine usage statistics and analytics\n   - Multi-machine management dashboard\n   - Collaborative features\n\n5. **Advanced G-Code Features**\n   - Macro programming system\n   - Parametric G-code generation\n   - Conversational programming interface\n   - Tool wear compensation\n   - Advanced probing routines\n\n6. **Quality \u0026 Performance**\n   - Performance profiling and optimization\n   - Memory usage optimization\n   - Startup time improvements\n   - Plugin/extension system\n   - Scripting API (Lua/Python)\n\n7. **Documentation \u0026 Community**\n   - Video tutorials\n   - Interactive user guide\n   - API documentation site\n   - Plugin developer guide\n   - Community forum integration\n\n8. **Platform Expansion**\n   - Mobile companion app (iOS/Android)\n   - Web-based interface\n   - Raspberry Pi optimization\n   - Hardware integration (pendants, MPG)\n\nGoals:\n- Identify 3-5 high-value phases for Phase 8+\n- Define scope and task breakdown for each phase\n- Prioritize based on user needs and feasibility\n- Update PLAN.md with new phases\n- Create roadmap for next 12-24 months\n\nDeliverables:\n- Updated PLAN.md with Phase 8+ definitions\n- Task breakdown for next phase (Phase 8)\n- Prioritized feature list\n- Timeline estimates\n- Resource requirements","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T16:25:19.446178285+07:00","updated_at":"2025-10-28T16:25:47.371537195+07:00"}
{"id":"gcodekit4-9","title":"Analyze and fix communication system blocking UI events during file transmission","description":"Investigate and resolve UI blocking/freezing issues that occur when sending G-code files to the device through the communication system.\n\nProblem:\n- UI becomes unresponsive during G-code file transmission\n- Events are blocked or delayed while sending large files\n- User cannot interact with the interface during send operations\n- Application appears to hang or freeze\n\nCurrent Implementation:\n- Communication happens on separate threads\n- UI updates via Slint event loop\n- Timer-based state machine for non-blocking sends (implemented in v0.24.1)\n- Character-counting protocol for GRBL flow control\n\nInvestigation Areas:\n\n1. **Thread Communication**\n   - Review message passing between communication threads and UI\n   - Check for blocking operations in UI thread\n   - Analyze std::sync::mpsc channel usage\n   - Verify proper use of window.invoke_from_event_loop()\n\n2. **Send Operation Flow**\n   - Examine send_to_device implementation\n   - Review file chunking and batching strategy\n   - Check for synchronous operations that should be async\n   - Analyze acknowledgment tracking logic\n\n3. **UI Event Loop Integration**\n   - Verify Slint timer usage and frequency\n   - Check for long-running operations in callbacks\n   - Review window.invoke_from_event_loop() placement\n   - Ensure UI updates don't block on I/O\n\n4. **Resource Contention**\n   - Check for mutex/lock contention\n   - Analyze shared state access patterns\n   - Review Arc\u003cMutex\u003cT\u003e\u003e usage\n   - Identify potential deadlocks\n\n5. **Message Queue Management**\n   - Review channel buffer sizes\n   - Check for queue overflow conditions\n   - Analyze message processing rate\n   - Verify proper backpressure handling\n\nExpected Behavior:\n- UI remains fully responsive during file sends\n- User can cancel send operations at any time\n- Progress updates without UI freezing\n- Other UI controls remain functional\n- Console messages display in real-time\n\nPotential Solutions:\n1. Move more work off UI thread\n2. Reduce message passing frequency\n3. Batch UI updates more efficiently\n4. Use async/await for I/O operations\n5. Implement proper backpressure\n6. Add yield points in long operations\n7. Use dedicated worker threads for heavy tasks\n\nSuccess Criteria:\n- UI responds to user input during sends (\u003c100ms latency)\n- Progress bar updates smoothly\n- Console messages appear in real-time\n- Cancel button works immediately\n- No perceived freezing or hanging\n- All functionality remains accessible during transmission\n\nRelated:\n- v0.24.1 timer-based state machine implementation\n- Character-counting protocol for GRBL\n- UI timeout fixes previously implemented","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-28T23:09:09.217917019+07:00","updated_at":"2025-10-28T23:09:36.278737593+07:00"}

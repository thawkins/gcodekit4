//! Designer Tool UI Panel  
//! Provides 2D CAD drawing interface with vertical toolbox and canvas interaction

import { Button, SpinBox, VerticalBox, HorizontalBox } from "std-widgets.slint";

export struct DesignerShape {
    id: int,
    x: float,
    y: float,
    width: float,
    height: float,
    radius: float,
    x2: float,
    y2: float,
    shape_type: int,
    selected: bool,
}

export struct DesignerState {
    mode: int,
    zoom: float,
    pan_x: float,
    pan_y: float,
    selected_id: int,
}

component ToolButton inherits Rectangle {
    in property <int> tool_id;
    in property <int> current_mode;
    in property <string> icon_text;
    in property <string> tooltip;
    
    callback clicked;
    
    width: 48px;
    height: 48px;
    background: current_mode == tool_id ? #3498db : #2c3e50;
    border-width: 2px;
    border-color: current_mode == tool_id ? white : transparent;
    
    VerticalBox {
        alignment: center;
        Text {
            text: icon_text;
            font-size: 24px;
            horizontal-alignment: center;
            color: current_mode == tool_id ? white : #95a5a6;
        }
    }
    
    TouchArea {
        mouse-cursor: pointer;
        clicked => {
            root.clicked();
        }
    }
}

export component DesignerPanel inherits VerticalBox {
    in property <[DesignerShape]> shapes: [];
    in property <DesignerState> designer_state;
    in property <float> feed_rate: 120.0;
    in property <float> spindle_speed: 3000.0;
    in property <float> tool_diameter: 3.175;
    in property <float> cut_depth: -5.0;
    in property <string> generated_gcode: "";
    in property <bool> gcode_generated: false;
    
    callback set_mode(int);
    callback zoom_in();
    callback zoom_out();
    callback zoom_fit();
    callback delete_selected();
    callback clear_canvas();
    callback generate_toolpath();
    callback export_gcode();
    callback canvas_click(float, float);
    callback shape_drag(int, float, float);        // shape_id, dx, dy
    callback handle_drag(int, int, float, float);  // shape_id, handle_index, dx, dy
    callback deselect_all();
    
    spacing: 5px;
    padding: 5px;
    
    // Main layout: vertical toolbox on left, canvas and properties on right
    FocusScope {
        width: 100%;
        height: 100%;
        
        key-pressed(event) => {
            if event.text == Key.Escape {
                deselect_all();
                accept
            } else if event.text == Key.Delete {
                delete_selected();
                accept
            } else {
                reject
            }
        }
        
        HorizontalBox {
            spacing: 2px;
        
        // ═════════════════════════════════════════════
        // LEFT SIDEBAR: Vertical Tool Icons
        // ═════════════════════════════════════════════
        VerticalBox {
            width: 54px;
            spacing: 2px;
            alignment: start;
            
            // Drawing Tools
            ToolButton {
                tool_id: 0;
                current_mode: designer_state.mode;
                icon_text: "➜";
                tooltip: "Select (S)";
                clicked => { set_mode(0); }
            }
            
            ToolButton {
                tool_id: 1;
                current_mode: designer_state.mode;
                icon_text: "▭";
                tooltip: "Rectangle (R)";
                clicked => { set_mode(1); }
            }
            
            ToolButton {
                tool_id: 2;
                current_mode: designer_state.mode;
                icon_text: "●";
                tooltip: "Circle (C)";
                clicked => { set_mode(2); }
            }
            
            ToolButton {
                tool_id: 3;
                current_mode: designer_state.mode;
                icon_text: "/";
                tooltip: "Line (L)";
                clicked => { set_mode(3); }
            }
            
            VerticalBox { } // Spacer
            
            // View Controls
            Button {
                text: "+";
                width: 50px;
                clicked => { zoom_in(); }
            }
            
            Button {
                text: "-";
                width: 50px;
                clicked => { zoom_out(); }
            }
            
            Button {
                text: "⊡";
                width: 50px;
                clicked => { zoom_fit(); }
            }
            
            VerticalBox { } // Spacer
            
            // Edit Controls
            Button {
                text: "✗";
                width: 50px;
                clicked => { delete_selected(); }
            }
            
            Button {
                text: "⊕";
                width: 50px;
                clicked => { clear_canvas(); }
            }
        }
        
        // ═════════════════════════════════════════════
        // CENTER: Canvas Area
        // ═════════════════════════════════════════════
        VerticalBox {
            width: 100%;
            min-width: 300px;
            
            // Canvas with interactive area
            Rectangle {
                width: 100%;
                height: 100%;
                background: #2c3e50;
                
                VerticalBox {
                    Rectangle {
                        width: 100%;
                        height: 80%;
                        background: #34495e;
                        
                        // Render shapes (shape_type: 0=rect, 1=circle, 2=line)
                        for shape in shapes: Rectangle {
                            x: shape.x * 1px;
                            y: shape.y * 1px;
                            width: shape.shape_type == 1 ? shape.radius * 2 * 1px : shape.width * 1px;
                            height: shape.shape_type == 1 ? shape.radius * 2 * 1px : shape.height * 1px;
                            background: #3498db;
                            border-width: 2px;
                            border-color: #2980b9;
                            border-radius: shape.shape_type == 1 ? shape.radius * 1px : 2px;
                            
                            // Drag handler for moving shape
                            if shape.selected: TouchArea {
                                width: 100%;
                                height: 100%;
                                mouse-cursor: grab;
                                moved => {
                                    shape_drag(shape.id, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                }
                            }
                            
                            // Selection bounding box with handles
                            if shape.selected: Rectangle {
                                width: 100%;
                                height: 100%;
                                background: transparent;
                                border-width: 2px;
                                border-color: #ffeb3b;
                                
                                // Top-left handle (0)
                                Rectangle {
                                    x: -6px;
                                    y: -6px;
                                    width: 12px;
                                    height: 12px;
                                    background: #ffeb3b;
                                    border-width: 1px;
                                    border-color: white;
                                    TouchArea {
                                        width: 100%;
                                        height: 100%;
                                        mouse-cursor: nwse-resize;
                                        moved => {
                                            handle_drag(shape.id, 0, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                        }
                                    }
                                }
                                
                                // Top-right handle (1)
                                Rectangle {
                                    x: parent.width - 6px;
                                    y: -6px;
                                    width: 12px;
                                    height: 12px;
                                    background: #ffeb3b;
                                    border-width: 1px;
                                    border-color: white;
                                    TouchArea {
                                        width: 100%;
                                        height: 100%;
                                        mouse-cursor: nesw-resize;
                                        moved => {
                                            handle_drag(shape.id, 1, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                        }
                                    }
                                }
                                
                                // Bottom-left handle (2)
                                Rectangle {
                                    x: -6px;
                                    y: parent.height - 6px;
                                    width: 12px;
                                    height: 12px;
                                    background: #ffeb3b;
                                    border-width: 1px;
                                    border-color: white;
                                    TouchArea {
                                        width: 100%;
                                        height: 100%;
                                        mouse-cursor: nesw-resize;
                                        moved => {
                                            handle_drag(shape.id, 2, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                        }
                                    }
                                }
                                
                                // Bottom-right handle (3)
                                Rectangle {
                                    x: parent.width - 6px;
                                    y: parent.height - 6px;
                                    width: 12px;
                                    height: 12px;
                                    background: #ffeb3b;
                                    border-width: 1px;
                                    border-color: white;
                                    TouchArea {
                                        width: 100%;
                                        height: 100%;
                                        mouse-cursor: nwse-resize;
                                        moved => {
                                            handle_drag(shape.id, 3, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                        }
                                    }
                                }
                                
                                // Center handle (4)
                                Rectangle {
                                    x: parent.width / 2 - 6px;
                                    y: parent.height / 2 - 6px;
                                    width: 12px;
                                    height: 12px;
                                    background: #ffeb3b;
                                    border-width: 1px;
                                    border-color: white;
                                    border-radius: 6px;
                                    TouchArea {
                                        width: 100%;
                                        height: 100%;
                                        mouse-cursor: grab;
                                        moved => {
                                            handle_drag(shape.id, 4, (self.mouse_x - self.pressed_x) / 1px, (self.mouse_y - self.pressed_y) / 1px);
                                        }
                                    }
                                }
                            }
                        }
                        
                        // Make canvas interactive
                        TouchArea {
                            mouse-cursor: 
                                designer_state.mode == 0 ? default :
                                designer_state.mode == 1 ? crosshair :
                                designer_state.mode == 2 ? crosshair :
                                designer_state.mode == 3 ? crosshair :
                                default;
                            
                            clicked => {
                                // Use relative position within the TouchArea
                                canvas_click(self.mouse_x / 1px, self.mouse_y / 1px);
                            }
                        }
                    }
                    
                    Text {
                        text: "Canvas - " + shapes.length + " shapes | Mode: " + 
                              (designer_state.mode == 0 ? "Select" :
                               designer_state.mode == 1 ? "Rectangle" :
                               designer_state.mode == 2 ? "Circle" : "Line");
                        font-size: 11px;
                    }
                }
            }
        }
        
        // ═════════════════════════════════════════════
        // RIGHT SIDEBAR: Properties Panel
        // ═════════════════════════════════════════════
        VerticalBox {
            width: 180px;
            spacing: 8px;
            
            Text {
                text: "Tool Parameters";
                font-weight: 700;
                font-size: 12px;
            }
            
            HorizontalBox {
                Text { text: "Feed:"; width: 60px; }
                SpinBox { value: feed_rate; }
            }
            HorizontalBox {
                Text { text: "Spindle:"; width: 60px; }
                SpinBox { value: spindle_speed; }
            }
            HorizontalBox {
                Text { text: "Tool Ø:"; width: 60px; }
                SpinBox { value: tool_diameter; }
            }
            HorizontalBox {
                Text { text: "Depth:"; width: 60px; }
                SpinBox { value: cut_depth; }
            }
            
            Text {
                text: "Generate G-Code";
                font-weight: 700;
                font-size: 12px;
            }
            
            Button {
                text: "⚙ Generate";
                width: 100%;
                clicked => { generate_toolpath(); }
            }
            
            Button {
                text: "► Export";
                width: 100%;
                clicked => { export_gcode(); }
            }
            
            Text {
                text: gcode_generated ? "✓ Ready" : "⊘ No G-Code";
                font-size: 10px;
                color: gcode_generated ? #2ecc71 : #e74c3c;
                horizontal-alignment: center;
            }
            
            VerticalBox { }
        }
    }
    }
}

/// Machine Control Panel Component
/// Displays position (DRO), jog controls, and coordinate system buttons

import { Button, ComboBox, LineEdit, VerticalBox, HorizontalBox, ScrollView } from "std-widgets.slint";

export component JogButton inherits Rectangle {
    in property <bool> connected: false;
    in property <float> step-size: 1.0;
    in-out property text <=> txt.text;
    callback clicked(float);
    width: 10%;
    height: 65px;
    background: #ecf0f1;
    border-width: 2px;
    border-color: root.connected ? #34495e : #bdc3c7;
    border-radius: 5px;
    opacity: root.connected ? 1.0 : 0.5;
    txt := Text {
        x: (parent.width - self.width)/2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height)/2 + (touch.pressed ? 1px : 0);
        font-size: 28px;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: touch.pressed ? #fff : #333;
    }
    touch := TouchArea {
        clicked => {
            root.clicked(root.step-size);
        }
    }
}

export component MachineControlPanel inherits VerticalBox {
    spacing: 0px;
    padding: 10px;
    horizontal-stretch: 1.0;
    vertical-stretch: 1.0;
    
    in property <bool> connected: false;
    in property <float> position-x: 0.0;
    in property <float> position-y: 0.0;
    in property <float> position-z: 0.0;
    in property <float> position-a: 0.0;
    in property <float> position-b: 0.0;
    in property <float> position-c: 0.0;
    in property <float> feed-rate: 0.0;
    in property <float> spindle-speed: 0.0;
    
    callback jog-home-clicked();
    callback jog-x-positive(float);
    callback jog-x-negative(float);
    callback jog-y-positive(float);
    callback jog-y-negative(float);
    callback jog-z-positive(float);
    callback jog-z-negative(float);
    callback jog-a-positive(float);
    callback jog-a-negative(float);
    callback jog-b-positive(float);
    callback jog-b-negative(float);
    
    private property <float> step-size: 1.0;
    private property <int> step-index: 1;
    
    // Connection controls passed from parent
    in property <[string]> available-ports;
    in property <string> selected-port;
    callback port-selected(string);
    callback connect-clicked();
    callback disconnect-clicked();
    callback refresh-ports-clicked();
    
    ScrollView {
        VerticalBox {
            spacing: 15px;
            padding: 5px;
            padding-right: 5px;
            horizontal-stretch: 1.0;
            vertical-stretch: 1.0;
            
            // Connection Panel (horizontal layout)
            Rectangle {
                background: #ecf0f1;
                height: 50px;
                
                HorizontalBox {
                    padding: 8px;
                    spacing: 8px;
                    alignment: start;
                    
                    Text { 
                        text: "Port:";
                        width: 40px;
                        vertical-alignment: center;
                        font-size: 13px;
                    }
                    ComboBox {
                        width: 180px;
                        model: root.available-ports;
                        current-value: root.selected-port;
                        selected(value) => {
                            root.port-selected(value);
                        }
                    }
                    Button {
                        text: root.connected ? "Disconnect" : "Connect";
                        width: 100px;
                        clicked => {
                            if (root.connected) {
                                root.disconnect-clicked();
                            } else {
                                root.connect-clicked();
                            }
                        }
                    }
                    Button {
                        text: "Refresh";
                        width: 90px;
                        clicked => { root.refresh-ports-clicked(); }
                    }
                }
            }
            
            /// DRO Display (moved to top)
            Rectangle {
                background: #ecf0f1;
                height: 175px;
                
                VerticalBox {
                    padding: 10px;
                    spacing: 4px;
                    
                    Text {
                        text: "Position (Work)";
                        font-weight: 700;
                        font-size: 14px;
                    }
                    
                    /// Linear axes (X, Y, Z) + Feed
                    HorizontalBox {
                        spacing: 10px;
                        alignment: start;
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "X:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-x * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "Y:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-y * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "Z:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-z * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 24.8%;
                            spacing: 4px;
                            Text { 
                                text: "Feed:"; 
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.feed-rate * 10.0) / 10.0 + " mm/m\u{2003}\u{2003}";
                            }
                        }
                    }
                    
                    /// Rotary axes (A, B, C) + Speed
                    HorizontalBox {
                        spacing: 10px;
                        alignment: start;
                        width: 100%;
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "A:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-a * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "B:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-b * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 23%;
                            spacing: 4px;
                            Text { 
                                text: "C:"; 
                                width: 20px;
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.position-c * 1000.0) / 1000.0 + " mm\u{2003}";
                            }
                        }
                        
                        HorizontalBox {
                            width: 24.8%;
                            spacing: 4px;
                            Text { 
                                text: "Speed:"; 
                                vertical-alignment: center;
                            }
                            LineEdit {
                                read-only: true;
                                text: round(root.spindle-speed) + " rpm\u{2003}\u{2003}";
                            }
                        }
                    }
                }
            }
            
            /// Step Size Dropdown and Status Line
            HorizontalBox {
                spacing: 6px;
                alignment: start;
                
                Text {
                    text: "Step Size (mm):";
                    vertical-alignment: center;
                    font-size: 12px;
                }
                
                step-combo := ComboBox {
                    model: ["0.1", "1.0", "10", "50"];
                    current-index: step-index;
                    enabled: true;
                    height: 24px;
                    selected => {
                        step-index = step-combo.current-index;
                        step-size = [0.1, 1.0, 10.0, 50.0][step-combo.current-index];
                    }
                }
                
                Text {
                    text: "mm";
                    vertical-alignment: center;
                    font-size: 12px;
                }
            }
            
            /// Main controls area with buttons
            Rectangle {
                background: transparent;
                
                VerticalBox {
                    alignment: center;
                    spacing: 6px;
                    
                    /// Row 1-3: Jog Buttons Grid
                    HorizontalBox {
                        spacing: 6px;

                        // rotate A axis left
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "A ⟲";
                            clicked(step) => {
                                root.jog-a-negative(step);
                            }
                        }

                        // Jog Y axis up (+)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "Y ▲";
                            clicked(step) => {
                                root.jog-y-positive(step);
                            }
                        }

                        // Rotate B axis left
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "B ⟲";
                            clicked(step) => {
                                root.jog-b-negative(step);
                            }
                        }
                        

                        // Jog Z Axis up (+)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "Z ▲";
                            clicked(step) => {
                                root.jog-z-positive(step);
                            }
                        }
                        

                        Rectangle {
                            width: 5%;
                            height: 65px;
                        }
                        Rectangle {
                            width: 10%;
                            height: 65px;
                        }

                        // Zero X axis
                        JogButton {
                            connected: root.connected;
                            text: "X ⊙";
                        }

                        // Zero Y axis
                        JogButton {
                            connected: root.connected;
                            text: "Y ⊙";
                        }

                        // Zero Z axis
                        JogButton {
                            connected: root.connected;
                            text: "Z ⊙";
                        }

                    }
                    
                    HorizontalBox {
                        spacing: 6px;
                        
                        // Jog X left (-)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "◀ X";
                            clicked(step) => {
                                root.jog-x-negative(step);
                            }
                        }

                        // Jog Home 
                        JogButton {
                            connected: root.connected;
                            text: "⌂";
                            clicked => {
                                root.jog-home-clicked();
                            }
                        }

                        // Jog X axis right (+)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "X ▶";
                            clicked(step) => {
                                root.jog-x-positive(step);
                            }
                        }

                       Rectangle {
                            width: 5%;
                            height: 65px;
                        }
                        Rectangle {
                            width: 10%;
                            height: 65px;
                        }

                        JogButton {
                            connected: root.connected;
                            text: "G54";
                        }
                        JogButton {
                            connected: root.connected;
                            text: "G55";
                        }
                        JogButton {
                            connected: root.connected;
                            text: "G56";
                        }
                    }
                    
                    HorizontalBox {
                        spacing: 6px;
 
                        // rotate A Axis Right
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "A ⟳";
                            clicked(step) => {
                                root.jog-a-positive(step);
                            }
                        }

                        // Jog Y Axis down (-)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "Y ▼";
                            clicked(step) => {
                                root.jog-y-negative(step);
                            }
                        }

                        // Jog B Axis Right (+)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "B ⟳";
                            clicked(step) => {
                                root.jog-b-positive(step);
                            }
                        }

                        // Jog Z Axis down (-)
                        JogButton {
                            connected: root.connected;
                            step-size: root.step-size;
                            text: "Z ▼";
                            clicked(step) => {
                                root.jog-z-negative(step);
                            }
                        }
                        Rectangle {
                            width: 5%;
                            height: 65px;
                        }

                        JogButton {
                            connected: root.connected;
                            text: "G57";
                        }
                        JogButton {
                            connected: root.connected;
                            text: "G58";
                        }
                        JogButton {
                            connected: root.connected;
                            text: "G59";
                        }
                    }
                }
            }
        }
    }
}

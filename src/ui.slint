//! GCodeKit4 Main UI
//! Universal G-Code Sender for CNC Machines
//! Modular UI with separated panel components

import { Button, ComboBox, LineEdit, TextEdit, VerticalBox, HorizontalBox, ScrollView, SpinBox, CheckBox } from "std-widgets.slint";

// Import all panel components
import { GcodeEditorPanel } from "ui_panels/gcode_editor.slint";
import { DeviceConsolePanel } from "ui_panels/device_console.slint";
import { MachineControlPanel } from "ui_panels/machine_control.slint";
import { FileValidationPanel } from "ui_panels/file_validation.slint";
import { AdvancedFeaturesPanel } from "ui_panels/advanced_features.slint";
import { SafetyDiagnosticsPanel } from "ui_panels/safety_diagnostics.slint";
import { GcodeVisualizerPanel } from "ui_panels/gcode_visualizer.slint";
import { MainMenu } from "ui/ui_components/mainmenu.slint";
import { SettingsDialog, SettingItem } from "ui/ui_components/settings_dialog.slint";

export struct PortInfo {
    port: string,
    description: string,
}

export component MainWindow inherits Window {
    title: "GCodeKit4 - Universal G-Code Sender";
    
    // Dynamic properties exposed to Rust
    in property <[string]> available-ports: [];
    in-out property <string> selected-port: "";
    in property <bool> connected: false;
    in property <string> connection-status: "Disconnected";
    in property <string> device-version: "Unknown";
    in property <[SettingItem]> all-settings: [];
    in property <float> position-x: 0.0;
    in property <float> position-y: 0.0;
    in property <float> position-z: 0.0;
    in property <float> position-a: 0.0;
    in property <float> position-b: 0.0;
    in property <float> position-c: 0.0;
    in property <float> feed-rate: 0.0;
    in property <float> spindle-speed: 0.0;
    in property <string> machine-state: "DISCONNECTED";
    in property <string> app-version: "0.9.1";
    in property <string> app-build-date: "2025-10-22";
    in property <string> console-output: "[INFO] GCodeKit4 initialized\n[INFO] Ready for operation\n";
    in-out property <string> gcode-content: "";
    in-out property <string> current-view: "gcode-editor";
    in-out property <image> visualization-image;
    in-out property <string> gcode-filename: "untitled.gcode";
    in property <int> console-scroll-trigger: 0;
    
    // Phase 7 UI Integration - New Panels
    in property <[string]> validation-issues: [];
    in property <string> validation-summary: "No issues detected";
    in property <int> validation-error-count: 0;
    in property <int> validation-warning-count: 0;
    in property <string> advanced-features-mode: "None";
    in property <string> simulation-state: "Idle";
    in property <string> safety-status: "Safe";
    in property <bool> emergency-stop-armed: true;
    in property <string> diagnostics-info: "Ready";
    
    // Visualizer panel properties
    in property <float> visualizer-progress: 0.0;
    in property <string> visualizer-status: "Ready";
    in property <float> visualizer-x-offset: 0.0;
    in property <float> visualizer-y-offset: 0.0;
    in property <float> visualizer-zoom-scale: 1.0;
    
    callback refresh-ports();
    callback connect(string, int);
    callback disconnect();
    callback menu-file-open();
    callback menu-file-save();
    callback menu-file-save-as();
    callback menu-send-to-device();
    callback menu-file-exit();
    callback machine-jog-home();
    callback machine-jog-x-positive(float);
    callback machine-jog-x-negative(float);
    callback menu-edit-preferences();
    callback menu-settings-save();
    callback menu-settings-cancel();
    callback menu-settings-restore-defaults();
    callback menu-view-fullscreen();
    callback menu-view-gcode-editor();
    callback menu-view-machine();
    callback menu-view-device-console();
    callback menu-view-file-validation();
    callback menu-view-advanced-features();
    callback menu-view-safety-diagnostics();
    callback menu-view-gcode-visualizer();
    callback menu-help-about();
    callback update-setting(string, string);
    callback console-clear-clicked();
    callback console-copy-clicked();
    callback refresh-visualization();
    callback zoom-in();
    callback zoom-out();
    callback reset-view();
    callback fit-to-view();
    callback pan-left();
    callback pan-right();
    callback pan-up();
    callback pan-down();
    
    // Internal state for UI selections
    private property <int> port-index: 0;
    private property <int> console-scroll-ref: 0;
    private property <float> step-size: 1.0;
    private property <int> step-index: 1;
    
    // Private properties for dialogs
    private property <bool> about-dialog-visible: false;
    private property <bool> settings-dialog-visible: false;
    private property <string> settings-category: "controller";
    // Native menu bar with dark theme support
    MenuBar {
        Menu {
            title: @tr("File");
            MenuItem {
                title: @tr("Open File");
                activated => { root.menu-file-open(); }
            }
            MenuItem {
                title: @tr("Save File");
                activated => { root.menu-file-save(); }
            }
            MenuItem {
                title: @tr("Save As");
                activated => { root.menu-file-save-as(); }
            }
            MenuItem {
                title: @tr("Exit");
                activated => { root.menu-file-exit(); }
            }
        }
        
        Menu {
            title: @tr("Edit");
            MenuItem {
                title: @tr("Preferences");
                activated => { 
                    root.menu-edit-preferences();
                    settings-dialog-visible = true;
                }
            }
        }
        
        Menu {
            title: @tr("View");
            MenuItem {
                title: current-view == "gcode-editor" ? @tr("✓ G-Code Editor") : @tr("G-Code Editor");
                activated => {
                    if (current-view != "gcode-editor") {
                        current-view = "gcode-editor";
                        root.menu-view-gcode-editor();
                    }
                }
            }
            MenuItem {
                title: current-view == "machine" ? @tr("✓ Machine") : @tr("Machine");
                activated => {
                    if (current-view != "machine") {
                        current-view = "machine";
                        root.menu-view-machine();
                    }
                }
            }
            MenuItem {
                title: current-view == "device-console" ? @tr("✓ Device Console") : @tr("Device Console");
                activated => {
                    if (current-view != "device-console") {
                        current-view = "device-console";
                        root.menu-view-device-console();
                    }
                }
            }
            MenuItem {
                title: current-view == "file-validation" ? @tr("✓ File Validation") : @tr("File Validation");
                activated => {
                    if (current-view != "file-validation") {
                        current-view = "file-validation";
                        root.menu-view-file-validation();
                    }
                }
            }
            MenuItem {
                title: current-view == "advanced-features" ? @tr("✓ Advanced Features") : @tr("Advanced Features");
                activated => {
                    if (current-view != "advanced-features") {
                        current-view = "advanced-features";
                        root.menu-view-advanced-features();
                    }
                }
            }
            MenuItem {
                title: current-view == "safety-diagnostics" ? @tr("✓ Safety & Diagnostics") : @tr("Safety & Diagnostics");
                activated => {
                    if (current-view != "safety-diagnostics") {
                        current-view = "safety-diagnostics";
                        root.menu-view-safety-diagnostics();
                    }
                }
            }
            MenuItem {
                title: current-view == "gcode-visualizer" ? @tr("✓ Visualizer") : @tr("Visualizer");
                activated => {
                    if (current-view != "gcode-visualizer") {
                        current-view = "gcode-visualizer";
                        root.menu-view-gcode-visualizer();
                    }
                }
            }
        }
        
        Menu {
            title: @tr("Help");
            MenuItem {
                title: @tr("About");
                activated => { 
                    root.menu-help-about();
                    about-dialog-visible = true;
                }
            }
        }
    }
    
    VerticalBox {
        spacing: 0px;
        
        // Main content area
        HorizontalBox {
            spacing: 10px;
            padding: 10px;
            
            // Left panel - Connection and Control
            VerticalBox {
                width: 300px;
                spacing: 10px;
                
                // Connection Panel
                Rectangle {
                    background: #ecf0f1;
                    height: 135px;
                    
                    Rectangle {
                        background: #ecf0f1;
                        width: 100%;
                        y: 0;
                        
                        VerticalBox {
                            padding: 10px;
                            spacing: 8px;
                            
                            Text {
                                text: "Connection";
                                font-weight: 700;
                                font-size: 14px;
                            }
                            
                            HorizontalBox {
                                Text { text: "Port:"; width: 50px; }
                                port-combo := ComboBox {
                                    model: root.available-ports;
                                    current-index: port-index;
                                    selected => {
                                        port-index = port-combo.current-index;
                                        if (port-combo.current-index >= 0 && port-combo.current-index < root.available-ports.length) {
                                            root.selected-port = root.available-ports[port-combo.current-index];
                                        }
                                    }
                                }
                            }
                            
                            HorizontalBox {
                                spacing: 5px;
                                Button {
                                    text: root.connected ? "Disconnect" : "Connect";
                                    width: 50%;
                                    clicked => {
                                        if (root.connected) {
                                            root.disconnect();
                                        } else {
                                            root.connect(root.selected-port, 115200);
                                        }
                                    }
                                }
                                Button {
                                    text: "Refresh";
                                    width: 50%;
                                    clicked => { root.refresh-ports(); }
                                }
                            }
                        }
                    }
                }
                
                // Control Buttons
                Rectangle {
                    background: #ecf0f1;
                    VerticalBox {
                        padding: 10px;
                        spacing: 8px;
                        
                        Button {
                            text: "Start";
                        }
                        Button {
                            text: "Pause";
                        }
                        Button {
                            text: "Stop";
                        }
                        Button {
                            text: "Reset";
                        }
                    }
                }
            }
            
            // Center panel - File and Viewer
            VerticalBox {
                spacing: 0px;
                horizontal-stretch: 1.0;
                vertical-stretch: 1.0;
                
                // Tab bar
                Rectangle {
                    background: #2c3e50;
                    height: 40px;
                    
                    HorizontalBox {
                        padding: 4px;
                        spacing: 2px;
                        alignment: start;
                        
                        // G-Code Editor Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "gcode-editor" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "G-Code Editor";
                                color: current-view == "gcode-editor" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "gcode-editor" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "gcode-editor";
                                    root.menu-view-gcode-editor();
                                }
                            }
                        }
                        
                        // Machine Control Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "machine" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "Machine Control";
                                color: current-view == "machine" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "machine" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "machine";
                                    root.menu-view-machine();
                                }
                            }
                        }
                        
                        // Device Console Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "device-console" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "Device Console";
                                color: current-view == "device-console" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "device-console" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "device-console";
                                    root.menu-view-device-console();
                                }
                            }
                        }
                        
                        // File Validation Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "file-validation" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "File Validation";
                                color: current-view == "file-validation" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "file-validation" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "file-validation";
                                    root.menu-view-file-validation();
                                }
                            }
                        }
                        
                        // Advanced Features Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "advanced-features" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "Advanced Features";
                                color: current-view == "advanced-features" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "advanced-features" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "advanced-features";
                                    root.menu-view-advanced-features();
                                }
                            }
                        }
                        
                        // Safety & Diagnostics Tab
                        Rectangle {
                            width: 140px;
                            height: 32px;
                            background: current-view == "safety-diagnostics" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "Safety & Diagnostics";
                                color: current-view == "safety-diagnostics" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "safety-diagnostics" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "safety-diagnostics";
                                    root.menu-view-safety-diagnostics();
                                }
                            }
                        }

                        // GCode Visualizer Tab
                        Rectangle {
                            width: 120px;
                            height: 32px;
                            background: current-view == "gcode-visualizer" ? #34495e : #3d5470;
                            border-radius: 3px;
                            
                            Text {
                                text: "Visualizer";
                                color: current-view == "gcode-visualizer" ? white : #bdc3c7;
                                font-size: 12px;
                                font-weight: current-view == "gcode-visualizer" ? 700 : 400;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                            
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    current-view = "gcode-visualizer";
                                    root.menu-view-gcode-visualizer();
                                }
                            }
                        }
                    }
                }
                
                // GCode Editor View - using imported component
                if current-view == "gcode-editor" : GcodeEditorPanel {
                    gcode-content <=> root.gcode-content;
                    gcode-filename <=> root.gcode-filename;
                    menu-file-open => {
                        root.menu-file-open();
                    }
                    menu-file-save => {
                        root.menu-file-save();
                    }
                    menu-file-save-as => {
                        root.menu-file-save-as();
                    }
                    menu-send-to-device => {
                        root.menu-send-to-device();
                    }
                }
                
                // Device Console View
                // Device Console View - using imported component
                if current-view == "device-console" : DeviceConsolePanel {
                    console-output: root.console-output;
                    console-clear-clicked => {
                        root.console-clear-clicked();
                    }
                    console-copy-clicked => {
                        root.console-copy-clicked();
                    }
                }
                
                // Machine Control View
                if current-view == "machine" : MachineControlPanel {
                    connected: root.connected;
                    position-x: root.position-x;
                    position-y: root.position-y;
                    position-z: root.position-z;
                    position-a: root.position-a;
                    position-b: root.position-b;
                    position-c: root.position-c;
                    feed-rate: root.feed-rate;
                    spindle-speed: root.spindle-speed;
                    jog-home-clicked => {
                        root.machine-jog-home();
                    }
                    jog-x-positive(step) => {
                        root.machine-jog-x-positive(step);
                    }
                    jog-x-negative(step) => {
                        root.machine-jog-x-negative(step);
                    }
                }
                
                // File Validation View
                // File Validation View
                if current-view == "file-validation" : FileValidationPanel {
                    validation-issues: root.validation-issues;
                    validation-summary: root.validation-summary;
                    validation-error-count: root.validation-error-count;
                    validation-warning-count: root.validation-warning-count;
                }
                
                // Advanced Features View
                // Advanced Features View
                if current-view == "advanced-features" : AdvancedFeaturesPanel {
                    advanced-features-mode: root.advanced-features-mode;
                    simulation-state: root.simulation-state;
                }
                
                // Safety & Diagnostics View
                // Safety & Diagnostics View
if current-view == "safety-diagnostics" : SafetyDiagnosticsPanel {
                    emergency-stop-armed: root.emergency-stop-armed;
                    safety-status: root.safety-status;
                    diagnostics-info: root.diagnostics-info;
                }

                // GCode Visualizer View
                if current-view == "gcode-visualizer" : GcodeVisualizerPanel {
                    gcode-filename <=> root.gcode-filename;
                    gcode-content <=> root.gcode-content;
                    visualization-image: root.visualization-image;
                    machine-x: Math.round(root.position-x * 1000) / 1000 + "";
                    machine-y: Math.round(root.position-y * 1000) / 1000 + "";
                    machine-z: Math.round(root.position-z * 1000) / 1000 + "";
                    work-x: Math.round(root.position-a * 1000) / 1000 + "";
                    work-y: Math.round(root.position-b * 1000) / 1000 + "";
                    work-z: Math.round(root.position-c * 1000) / 1000 + "";
                    progress: root.visualizer-progress;
                    visualizer-status: root.visualizer-status;
                    x-offset: root.visualizer-x-offset;
                    y-offset: root.visualizer-y-offset;
                    zoom-scale: root.visualizer-zoom-scale;
                    
                    refresh-visualization => {
                        root.refresh-visualization();
                    }
                    
                    zoom-in => {
                        root.zoom-in();
                    }
                    
                    zoom-out => {
                        root.zoom-out();
                    }
                    
                    reset-view => {
                        root.reset-view();
                    }
                    
                    fit-to-view => {
                        root.fit-to-view();
                    }
                    
                    pan-left => {
                        root.pan-left();
                    }
                    
                    pan-right => {
                        root.pan-right();
                    }
                    
                    pan-up => {
                        root.pan-up();
                    }
                    
                    pan-down => {
                        root.pan-down();
                    }
                }
            }
        }
        
        // Status Panel - Compact Single Line
        Rectangle {
            height: 30px;
            background: #2c3e50;
            
            HorizontalBox {
                padding-top: 4px;
                padding-bottom: 4px;
                padding-left: 10px;
                padding-right: 10px;
                spacing: 0px;
                alignment: start;
                
                // Connection Status Indicator (colored square)
                Rectangle {
                    width: 16px;
                    height: 16px;
                    background: root.connected ? #2ecc71 : #e74c3c;
                    border-radius: 2px;
                }
                
                // Separator 1
                Text {
                    text: " \u{2003} ";
                    color: white;
                    font-size: 13.2px;
                }
                
                // Port Display
                Text {
                    text: root.connected ? root.selected-port : "Disconnected";
                    color: white;
                    font-size: 13.2px;
                    font-family: "Monospace";
                }
                
                // Separator between Port and Version
                Text {
                    text: " \u{2003} | \u{2003} ";
                    color: white;
                    font-size: 13.2px;
                    visible: root.connected;
                }
                
                // Version Label and Device Info
                Text {
                    text: root.connected ? "Version: " + root.device-version : "";
                    color: white;
                    font-size: 13.2px;
                    font-family: "Monospace";
                    visible: root.connected;
                }
                
                // Separator 2 - Visual separator with EM spaces
                Text {
                    text: " \u{2003} | \u{2003} ";
                    color: white;
                    font-size: 13.2px;
                    visible: root.connected;
                }
                
                // Position Label
                Text {
                    text: "Position:";
                    color: white;
                    font-size: 13.2px;
                    font-family: "Monospace";
                    visible: root.connected;
                }
                
                // Position Display (X, Y, Z) - shown only when connected
                Text {
                    text: root.connected ? "\u{2003}X: " + round(root.position-x * 1000.0) / 1000.0 + "  Y: " + round(root.position-y * 1000.0) / 1000.0 + "  Z: " + round(root.position-z * 1000.0) / 1000.0 : "";
                    color: white;
                    font-size: 13.2px;
                    font-family: "Monospace";
                }
            }
        }
    }
    

    

    
    // About Dialog
    if about-dialog-visible : Rectangle {
        x: 0;
        y: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z: 2000;
        
        TouchArea {
            // Close dialog on background click
            clicked => {
                about-dialog-visible = false;
            }
        }
        
        Rectangle {
            x: (parent.width - 400px) / 2;
            y: (parent.height - 300px) / 2;
            width: 400px;
            height: 300px;
            background: #ecf0f1;
            border-radius: 5px;
            z: 2001;
            
            VerticalBox {
                padding: 20px;
                spacing: 15px;
                
                // Program Name - Triple Size
                Text {
                    text: "GCodeKit4";
                    font-size: 42px;
                    font-weight: 700;
                    color: #2c3e50;
                    horizontal-alignment: center;
                }
                
                // Version
                Text {
                    text: "Version: " + root.app-version;
                    font-size: 13px;
                    color: #34495e;
                    horizontal-alignment: center;
                }
                
                // Build Date
                Text {
                    text: "Built: " + root.app-build-date;
                    font-size: 13px;
                    color: #34495e;
                    horizontal-alignment: center;
                }
                
                // Spacer
                Rectangle {
                    height: 30px;
                }
                
                // OK Button - Lower Right
                HorizontalBox {
                    alignment: end;
                    
                    Button {
                        text: "Ok";
                        width: 80px;
                        height: 35px;
                        clicked => {
                            about-dialog-visible = false;
                        }
                    }
                }
            }
        }
    }
    
    // Settings Dialog
    SettingsDialog {
        visible: settings-dialog-visible;
        dialog-visible: settings-dialog-visible;
        settings-category: settings-category;
        all-settings: all-settings;
        menu-settings-save => { root.menu-settings-save(); }
        menu-settings-cancel => { root.menu-settings-cancel(); }
        menu-settings-restore-defaults => { root.menu-settings-restore-defaults(); }
        update-setting(id, value) => { root.update-setting(id, value); }
    }
}
